{"version":3,"sources":["contexts/auth/index.js","components/PageHeader/PageHeader.js","hooks/useRequest.js","containers/SignIn/SignIn.styles.js","containers/SignIn/SignIn.js","routes/AuthenticatedRoute/AuthenticatedRoute.js","components/DeleteButton/DeleteButton.js","components/NewButton/NewButton.js","components/HeaderArea/HeaderArea.styles.js","components/HeaderArea/HeaderArea.js","domain/admin/Requests/ListPage.styles.js","domain/admin/Requests/ListPage.js","components/EditButton/EditButton.js","domain/admin/Categories/ListPage.styles.js","domain/admin/Categories/ListPage.js","domain/admin/Categories/NewPage.styles.js","domain/admin/Categories/NewPage.js","domain/admin/Categories/EditPage.js","domain/admin/Courses/ListPage.styles.js","domain/admin/Courses/ListPage.js","domain/admin/Courses/NewPage.styles.js","domain/admin/Courses/NewPage.js","domain/admin/Courses/EditPage.js","domain/admin/Users/ListPage.styles.js","domain/admin/Users/ListPage.js","domain/admin/Users/NewPage.styles.js","domain/admin/Users/NewPage.js","domain/admin/Users/EditPage.js","domain/admin/HomePage/HomePage.js","domain/admin/layouts/MainLayout/MainLayout.styles.js","domain/admin/layouts/MainLayout/MainLayout.js","routes/AdminRoutes/AdminRoutes.js","routes/PublicRoute/PublicRoute.js","domain/user/HomePage/HomePage.js","routes/UserRoutes/UserRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["initialStates","isAuth","localStorage","getItem","accessToken","user","JSON","parse","AuthContext","createContext","AuthProvider","children","useReducer","state","action","type","payload","clear","dispatch","Provider","value","PageHeaderComponent","props","history","useHistory","onBack","goBack","useRequest","optionParams","useContext","useFetch","process","cachePolicy","interceptors","request","options","headers","Authorization","response","status","get","post","patch","delete","del","loading","error","data","styled","div","SignIn","Form","useForm","form","onFinish","useCallback","values","a","email","password","strategy","code","setFieldsValue","errorMessage","message","storage","remember","sessionStorage","successMessage","setItem","stringify","setTimeout","spinning","useMemo","PageHeader","className","title","name","layout","initialValues","onChange","Item","noStyle","shouldUpdate","prevValues","curValues","getFieldValue","showIcon","label","rules","required","autoFocus","Password","valuePropName","htmlType","AuthenticatedRoute","Component","component","restProps","render","to","pathname","DeleteButton","danger","icon","MinusCircleOutlined","NewButton","path","PlusCircleOutlined","Search","Input","HeaderArea","selectedIds","onDelete","onSearch","newPath","searchPlaceHolder","customButtonArea","disabled","length","onClick","placeholder","enterButton","allowClear","columns","dataIndex","key","width","ListPage","total","useState","page","setPage","setSelectedIds","useEffect","pageQuery","handleProcessRequest","notification","success","placement","handleDeleteRequest","CheckOutlined","style","color","backgroundColor","border","CloseOutlined","rowSelection","selectedRowKeys","dataSource","map","item","_id","course","note","pagination","pageSize","current","EditButton","EditOutlined","borderColor","query","setQuery","searchQuery","handleDeleteCategory","push","NewPage","replace","span","offset","tooltip","InfoCircleOutlined","EditPage","categoryId","useParams","getResponse","getCategoryInfo","handleDeleteCourse","text","category","description","Option","Select","TextArea","rows","categories","setCategories","categoriesResponse","price","getCourseInfo","_","record","role","sex","handleDeleteUser","formData","dob","format","defaultValue","userId","username","phone","moment","getUserInfo","HomePage","Header","Layout","Content","Sider","MainLayout","collapsed","setCollapsed","collapsible","onCollapse","theme","mode","defaultSelectedKeys","BarsOutlined","AlertOutlined","BookOutlined","UserOutlined","VideoCameraOutlined","FileOutlined","QuestionCircleOutlined","CheckCircleOutlined","overlay","SelectOutlined","LogoutOutlined","size","App","exact","AdminHomePage","ListRequest","ListCategory","NewCategory","EditCategory","ListCourse","NewCourse","EditCourse","ListUser","NewUser","EditUser","PublicRoute","UserHomePage","SignInPage","UserRoutes","AdminRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b95b5137.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\n\nconst initialStates = {\n  isAuth: localStorage.getItem(\"isAuth\") || false,\n  accessToken: localStorage.getItem(\"accessToken\") || null,\n  user: localStorage.getItem(\"user\")\n    ? JSON.parse(localStorage.getItem(\"user\"))\n    : null,\n};\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"login\":\n        return {\n          isAuth: true,\n          accessToken: action.payload.accessToken,\n          user: action.payload.user,\n        };\n\n      case \"logout\":\n        localStorage.clear();\n        return { isAuth: false, accessToken: null, user: {} };\n\n      default: {\n        return { ...initialStates };\n      }\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialStates);\n\n  return (\n    <AuthContext.Provider value={{ ...state, dispatch }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","import { PageHeader } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\n\nconst PageHeaderComponent = (props) => {\n  const history = useHistory();\n\n  return <PageHeader onBack={() => history.goBack()} {...props} />;\n};\n\nexport default PageHeaderComponent;\n","import { useContext } from \"react\";\nimport useFetch from \"use-http\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst useRequest = ({ optionParams = {} }) => {\n  const { accessToken, dispatch } = useContext(AuthContext);\n\n  const { get, post, patch, del, loading, error, data } = useFetch(\n    process.env.REACT_APP_API_URL,\n    {\n      ...optionParams,\n      cachePolicy: \"no-cache\",\n      interceptors: {\n        request: ({ options }) => ({\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }),\n        response: ({ response }) => {\n          if (!!accessToken && response.status === 401) {\n            dispatch({ type: \"logout\" });\n            return;\n          }\n          return response;\n        },\n      },\n    }\n  );\n\n  return { get, post, patch, delete: del, loading, error, response: data };\n};\n\nexport default useRequest;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #777;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .ant-page-header {\n    padding-top: 0;\n  }\n\n  & > div {\n    width: 400px;\n    background-color: #fff;\n    padding: 24px;\n    border-radius: 8px;\n\n    .sign-in-title {\n      .ant-page-header-heading {\n        justify-content: center;\n      }\n    }\n\n    .ant-alert {\n      margin-bottom: 16px;\n    }\n\n    .ant-form-item:last-child {\n      margin-bottom: 0 !important;\n      text-align: center;\n    }\n  }\n`;\n","import { Form, Input, Button, Checkbox, Spin, Alert } from \"antd\";\nimport { useCallback, useMemo, useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./SignIn.styles\";\n\nconst SignIn = () => {\n  const { dispatch } = useContext(AuthContext);\n  const { post, loading } = useRequest({});\n\n  const [form] = Form.useForm();\n\n  const onFinish = useCallback(\n    async (values) => {\n      const response = await post(\"/authentication\", {\n        email: values.email,\n        password: values.password,\n        strategy: \"local\",\n      });\n\n      if (response.code) {\n        form.setFieldsValue({ errorMessage: response.message });\n        return;\n      }\n\n      const storage = values.remember ? localStorage : sessionStorage;\n\n      const { accessToken, user } = response;\n\n      form.setFieldsValue({ successMessage: \"Login successfully\" });\n      storage.setItem(\"accessToken\", accessToken);\n      storage.setItem(\"user\", JSON.stringify(user));\n      storage.setItem(\"isAuth\", true);\n\n      setTimeout(() => {\n        dispatch({\n          type: \"login\",\n          payload: { user, accessToken },\n        });\n      }, 300);\n    },\n    [dispatch, form, post]\n  );\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        <div>\n          {useMemo(\n            () => (\n              <PageHeaderComponent\n                className=\"sign-in-title\"\n                title=\"SIGN IN\"\n                onBack={null}\n              />\n            ),\n            []\n          )}\n\n          {useMemo(\n            () => (\n              <Form\n                form={form}\n                name=\"basic\"\n                layout=\"vertical\"\n                initialValues={{ errorMessage: null }}\n                onFinish={onFinish}\n                onChange={() => form.setFieldsValue({ errorMessage: null })}\n              >\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.errorMessage !== curValues.errorMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"errorMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"errorMessage\")}\n                        type=\"error\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.successMessage !== curValues.successMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"successMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"successMessage\")}\n                        type=\"success\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Email\"\n                  name=\"email\"\n                  rules={[\n                    {\n                      required: true,\n                      type: \"email\",\n                      message: \"Please input your valid email!\",\n                    },\n                  ]}\n                >\n                  <Input autoFocus />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Password\"\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your password!\" },\n                  ]}\n                >\n                  <Input.Password />\n                </Form.Item>\n\n                <Form.Item name=\"remember\" valuePropName=\"checked\">\n                  <Checkbox>Remember me</Checkbox>\n                </Form.Item>\n\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Login\n                  </Button>\n                </Form.Item>\n              </Form>\n            ),\n            [form, onFinish]\n          )}\n        </div>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default SignIn;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst AuthenticatedRoute = ({ component: Component, ...restProps }) => {\n  const { isAuth } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) =>\n        isAuth ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/sign_in\" }} />\n        )\n      }\n    />\n  );\n};\n\nexport default AuthenticatedRoute;\n","import { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\nconst DeleteButton = (props) => {\n  return (\n    <Button type=\"primary\" danger icon={<MinusCircleOutlined />} {...props}>\n      Delete\n    </Button>\n  );\n};\n\nexport default DeleteButton;\n","import { Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\n\nconst NewButton = ({ path }) => {\n  return (\n    <Link to={path}>\n      <Button type=\"primary\" icon={<PlusCircleOutlined />}>\n        New\n      </Button>\n    </Link>\n  );\n};\n\nexport default NewButton;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 16px 16px;\n\n  .search-area {\n    width: 35%;\n  }\n\n  .button-area {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n\n    button {\n      margin-left: 8px;\n    }\n  }\n`;\n","import { Input } from \"antd\";\nimport { useMemo } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport NewButton from \"components/NewButton\";\nimport Wrapper from \"./HeaderArea.styles\";\n\nconst { Search } = Input;\n\nconst HeaderArea = ({\n  selectedIds,\n  onDelete,\n  onSearch,\n  newPath,\n  searchPlaceHolder,\n  customButtonArea,\n}) => {\n  return (\n    <Wrapper>\n      {!!customButtonArea && customButtonArea}\n\n      {!customButtonArea && (\n        <div className=\"button-area\">\n          <NewButton path={newPath} />\n\n          <DeleteButton disabled={!selectedIds.length} onClick={onDelete} />\n        </div>\n      )}\n\n      <div className=\"search-area\">\n        {useMemo(\n          () => (\n            <Search\n              onSearch={onSearch}\n              placeholder={searchPlaceHolder}\n              enterButton=\"Search\"\n              allowClear\n            />\n          ),\n          [onSearch, searchPlaceHolder]\n        )}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default HeaderArea;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n\n  .note-column {\n    max-width: 460px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-bottom: 0;\n  }\n`;\n","import { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { Table, Button, Tag, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User\",\n    dataIndex: \"user\",\n    key: \"user\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n  },\n  {\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n  },\n  {\n    title: \"Note\",\n    dataIndex: \"note\",\n    key: \"note\",\n    width: \"40%\",\n  },\n];\n\nconst ListPage = () => {\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    get(`/requests?${pageQuery}`);\n  }, [get, page]);\n\n  const handleProcessRequest = useCallback(\n    async (type) => {\n      await post(\"/process_requests\", { selectedIds, type });\n      notification.success({\n        message: `${\n          type === \"approve\" ? \"Approve\" : \"Reject\"\n        } request successfully`,\n        placement: \"topRight\",\n      });\n      setSelectedIds([]);\n      setPage(1);\n    },\n    [post, selectedIds]\n  );\n\n  const handleDeleteRequest = useCallback(async () => {\n    await post(\"/remove_requests\", { selectedIds });\n    notification.success({\n      message: \"Delete request successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      <PageHeader title=\"List request\" onBack={null} />\n\n      <HeaderArea\n        selectedIds={selectedIds}\n        onDelete={null}\n        searchPlaceHolder=\"Search request by user name or course name\"\n        customButtonArea={\n          <div className=\"button-area\">\n            <Button\n              icon={<CheckOutlined style={{ color: \"#52c41a\" }} />}\n              disabled={!selectedIds.length}\n              type=\"ghost\"\n              style={{\n                backgroundColor: \"#f6ffed\",\n                border: \"1px solid #b7eb8f\",\n              }}\n              onClick={() => handleProcessRequest(\"approve\")}\n            >\n              Approve\n            </Button>\n\n            <Button\n              icon={<CloseOutlined style={{ color: \"#ff4d4f\" }} />}\n              disabled={!selectedIds.length}\n              onClick={() => handleProcessRequest(\"reject\")}\n              type=\"ghost\"\n              style={{\n                backgroundColor: \"#fff2f0\",\n                border: \"1px solid #ffccc7\",\n              }}\n            >\n              Reject\n            </Button>\n\n            <DeleteButton\n              disabled={!selectedIds.length}\n              onClick={handleDeleteRequest}\n            />\n          </div>\n        }\n      />\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    user: item.user && item.user.email,\n                    course: item.course && item.course.name,\n                    note: <p className=\"note-column\">{item.note}</p>,\n                    status:\n                      item.status === \"waiting\" ? (\n                        <Tag color=\"gold\">{item.status}</Tag>\n                      ) : item.status === \"approved\" ? (\n                        <Tag color=\"green\">{item.status}</Tag>\n                      ) : (\n                        <Tag color=\"red\">{item.status}</Tag>\n                      ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\nconst EditButton = (props) => {\n  return (\n    <Button\n      icon={<EditOutlined />}\n      type=\"ghost\"\n      style={{\n        backgroundColor: \"#fff3cd\",\n        color: \"#856404\",\n        borderColor: \"#ffeeba\",\n      }}\n      {...props}\n    >\n      Edit\n    </Button>\n  );\n};\n\nexport default EditButton;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/categories?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteCategory = useCallback(async () => {\n    await post(\"/remove_categories\", { selectedIds });\n    notification.success({\n      message: \"Delete category successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      <PageHeader title=\"List category\" onBack={null} />\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search category by name\"\n            newPath=\"/admin/categories/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteCategory}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteCategory, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/categories/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import { Form, Input, Button, Spin, Row, Col, notification } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    (data) => {\n      post(\"/categories\", data);\n    },\n    [post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (response._id) {\n      notification.success({\n        message: \"Create category successfully\",\n        placement: \"topRight\",\n      });\n      history.replace(\"/admin/categories\");\n    }\n  }, [history, response]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New category\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Category name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import { Form, Input, Button, Spin, Row, Col, notification } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst EditPage = () => {\n  const history = useHistory();\n  const { categoryId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/categories/${categoryId}`, data);\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update category successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/categories\");\n      }\n    },\n    [categoryId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getCategoryInfo = async () => {\n      if (categoryId) {\n        const getResponse = await get(`/categories/${categoryId}`);\n        form.setFieldsValue({ name: getResponse.name });\n      }\n    };\n\n    getCategoryInfo();\n  }, [categoryId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit category\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Category not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Category name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n\n  .description-column {\n    max-width: 460px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-bottom: 0;\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport EditButton from \"components/EditButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Category\",\n    dataIndex: \"category\",\n    key: \"category\",\n  },\n  {\n    title: \"Price\",\n    dataIndex: \"price\",\n    key: \"price\",\n  },\n  {\n    title: \"Description\",\n    dataIndex: \"description\",\n    key: \"description\",\n    width: \"40%\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/courses?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteCourse = useCallback(async () => {\n    await post(\"/remove_courses\", { selectedIds });\n    notification.success({\n      message: \"Delete course successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      <PageHeader title=\"List course\" onBack={null} />\n\n      <HeaderArea\n        newPath=\"/admin/courses/new\"\n        searchPlaceHolder=\"Search course by name\"\n        selectedIds={selectedIds}\n        onDelete={handleDeleteCourse}\n        onSearch={(text) => setQuery(text)}\n      />\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    category: item.category.name,\n                    description: (\n                      <p className=\"description-column\">{item.description}</p>\n                    ),\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/courses/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const responseCourse = await post(\"/courses\", data);\n      if (responseCourse._id) {\n        notification.success({\n          message: \"Create course successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/courses\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/categories\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New course\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    name=\"category\"\n                    label=\"Category\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a category\" allowClear>\n                      {response.data &&\n                        response.data.map((category) => (\n                          <Option key={category._id} value={category._id}>\n                            {category.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Price\"\n                    name=\"price\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <TextArea rows={6} />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst EditPage = () => {\n  const { categoryId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n\n  const [categories, setCategories] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/courses/${categoryId}`, data);\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update course successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/courses\");\n      }\n    },\n    [categoryId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const categoriesResponse = await get(\"/categories\");\n      setCategories(categoriesResponse.data);\n\n      if (categoryId) {\n        const getResponse = await get(`/courses/${categoryId}`);\n        form.setFieldsValue({\n          name: getResponse.name,\n          category: getResponse.category,\n          description: getResponse.description,\n          price: getResponse.price,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [categoryId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit course\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Course not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        name=\"category\"\n                        label=\"Category\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a category\" allowClear>\n                          {categories.map((category) => (\n                            <Option key={category._id} value={category._id}>\n                              {category.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Price\"\n                        name=\"price\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Description\"\n                        name=\"description\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <TextArea rows={6} />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [categories, form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User Name\",\n    dataIndex: \"username\",\n    key: \"username\",\n  },\n  {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\",\n  },\n  {\n    title: \"Role\",\n    dataIndex: \"role\",\n    key: \"role\",\n    render: (_, record) => {\n      return record.role ? \"User\" : \"Admin\";\n    },\n  },\n  {\n    title: \"Birthday\",\n    dataIndex: \"dob\",\n    key: \"dob\",\n  },\n  {\n    title: \"Sex\",\n    dataIndex: \"sex\",\n    key: \"sex\",\n    render: (_, record) => {\n      return record.sex === 0 ? \"Male\" : record.sex === 1 ? \"Female\" : \"Other\";\n    },\n  },\n  {\n    title: \"Phone\",\n    dataIndex: \"phone\",\n    key: \"phone\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/users?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteUser = useCallback(async () => {\n    await post(\"/remove_users\", { selectedIds });\n    notification.success({\n      message: \"Delete user successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      <PageHeader title=\"List user\" onBack={null} />\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search user by name\"\n            newPath=\"/admin/users/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteUser}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteUser, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/users/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  Select,\n  DatePicker,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { post, loading } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = { ...data, dob: data.dob.format(\"DD/MM/YYYY\") };\n      const response = await post(\"/users\", formData);\n\n      if (response._id) {\n        notification.success({\n          message: \"Create user successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/users\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New user\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"username\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Email\"\n                    name=\"email\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      {\n                        required: true,\n                        type: \"email\",\n                        message: \"Please input your valid email!\",\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Password\"\n                    name=\"password\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      {\n                        required: true,\n                        message: \"This field is required\",\n                      },\n                    ]}\n                  >\n                    <Input.Password />\n                  </Form.Item>\n\n                  <Form.Item label=\"Role\" name=\"role\">\n                    <Select defaultValue={1}>\n                      <Option key=\"0\" value={0}>\n                        Admin\n                      </Option>\n                      <Option key=\"1\" value={1}>\n                        User\n                      </Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Sex\" name=\"sex\">\n                    <Select>\n                      <Option key=\"0\" value={0}>\n                        Male\n                      </Option>\n                      <Option key=\"1\" value={1}>\n                        Female\n                      </Option>\n                      <Option key=\"2\" value={2}>\n                        Other\n                      </Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Birthday\" name=\"dob\">\n                    <DatePicker\n                      placeholder=\"\"\n                      style={{ width: \"100%\" }}\n                      format=\"DD/MM/YYYY\"\n                    />\n                  </Form.Item>\n\n                  <Form.Item label=\"Phone\" name=\"phone\">\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  DatePicker,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const history = useHistory();\n  const { userId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = { ...data, dob: data.dob.format(\"DD/MM/YYYY\") };\n      const patchResponse = await patch(`/users/${userId}`, formData);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update user successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/users\");\n      }\n    },\n    [userId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getUserInfo = async () => {\n      if (userId) {\n        const getResponse = await get(`/users/${userId}`);\n        form.setFieldsValue({\n          username: getResponse.username,\n          email: getResponse.email,\n          role: getResponse.role,\n          password: getResponse.password,\n          phone: getResponse.phone || \"\",\n          dob: getResponse.dob ? moment(getResponse.dob, \"DD/MM/YYYY\") : \"\",\n          sex:\n            getResponse.sex !== \"null\" || getResponse.sex !== \"undefined\"\n              ? getResponse.sex\n              : \"\",\n        });\n      }\n    };\n\n    getUserInfo();\n  }, [userId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit user\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>User not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"username\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Email\"\n                        name=\"email\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          {\n                            required: true,\n                            type: \"email\",\n                            message: \"Please input your valid email!\",\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item label=\"Password\" name=\"password\">\n                        <Input.Password />\n                      </Form.Item>\n\n                      <Form.Item label=\"Role\" name=\"role\">\n                        <Select defaultValue={1}>\n                          <Option key=\"0\" value={0}>\n                            Admin\n                          </Option>\n                          <Option key=\"1\" value={1}>\n                            User\n                          </Option>\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item label=\"Sex\" name=\"sex\">\n                        <Select>\n                          <Option key=\"0\" value={0}>\n                            Male\n                          </Option>\n                          <Option key=\"1\" value={1}>\n                            Female\n                          </Option>\n                          <Option key=\"2\" value={2}>\n                            Other\n                          </Option>\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item label=\"Birthday\" name=\"dob\">\n                        <DatePicker\n                          placeholder=\"\"\n                          style={{ width: \"100%\" }}\n                          format=\"DD/MM/YYYY\"\n                        />\n                      </Form.Item>\n\n                      <Form.Item label=\"Phone\" name=\"phone\">\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","const HomePage = () => {\n  return <h1>Home page admin</h1>;\n};\n\nexport default HomePage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  min-height: 100vh;\n\n  .ant-layout {\n    min-height: 100vh;\n  }\n\n  .ant-layout-sider-collapsed {\n    .logo {\n      font-size: 12px !important;\n    }\n  }\n\n  .ant-layout-header {\n    height: 60px;\n  }\n\n  .logo {\n    min-height: 32px;\n    margin: 16px;\n    color: #fff;\n    font-size: 23px;\n    text-align: center;\n  }\n\n  .site-layout .site-layout-background {\n    background: #fff;\n  }\n\n  header.site-layout-background {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: 0 24px 0 0;\n  }\n\n  main.site-layout-background {\n    margin: 16px 16px;\n    /* padding: 24px; */\n  }\n`;\n","import { useState, useContext } from \"react\";\nimport { Layout, Menu, Avatar, Dropdown } from \"antd\";\nimport {\n  UserOutlined,\n  VideoCameraOutlined,\n  AlertOutlined,\n  BookOutlined,\n  FileOutlined,\n  QuestionCircleOutlined,\n  CheckCircleOutlined,\n  SelectOutlined,\n  LogoutOutlined,\n  BarsOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\n\nimport AuthContext from \"contexts/auth\";\nimport Wrapper from \"./MainLayout.styles\";\n\nconst { Header, Content, Sider } = Layout;\n\nconst MainLayout = ({ children }) => {\n  const { dispatch } = useContext(AuthContext);\n  const [collapsed, setCollapsed] = useState(false);\n\n  const toggle = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <Wrapper>\n      <Layout>\n        <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\n          <div className=\"logo\">SALE COURSES</div>\n\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[]}>\n            <Menu.Item key=\"category\" icon={<BarsOutlined />}>\n              <Link to=\"/admin/categories\">Categories</Link>\n            </Menu.Item>\n\n            <Menu.Item key=\"request\" icon={<AlertOutlined />}>\n              <Link to=\"/admin/requests\">Requests</Link>\n            </Menu.Item>\n\n            <Menu.Item key=\"course\" icon={<BookOutlined />}>\n              <Link to=\"/admin/courses\">Courses</Link>\n            </Menu.Item>\n\n            <Menu.Item key=\"user\" icon={<UserOutlined />}>\n              <Link to=\"/admin/users\">Users</Link>\n            </Menu.Item>\n\n            <Menu.Item key=\"video\" icon={<VideoCameraOutlined />}>\n              Videos\n            </Menu.Item>\n\n            <Menu.Item key=\"exam\" icon={<FileOutlined />}>\n              Exams\n            </Menu.Item>\n\n            <Menu.Item key=\"question\" icon={<QuestionCircleOutlined />}>\n              Questions\n            </Menu.Item>\n\n            <Menu.Item key=\"answer\" icon={<CheckCircleOutlined />}>\n              Answers\n            </Menu.Item>\n          </Menu>\n        </Sider>\n\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\">\n            <div className=\"user-info\">\n              <Dropdown\n                overlay={\n                  <Menu>\n                    <Menu.Item key=\"user-profile\" icon={<SelectOutlined />}>\n                      User profile\n                    </Menu.Item>\n                    <Menu.Item\n                      key=\"logout\"\n                      icon={<LogoutOutlined />}\n                      onClick={() => dispatch({ type: \"logout\" })}\n                    >\n                      Logout\n                    </Menu.Item>\n                  </Menu>\n                }\n              >\n                <Avatar size=\"large\" icon={<UserOutlined />} />\n              </Dropdown>\n            </div>\n          </Header>\n\n          {/* <Breadcrumb data={breadcrumb} /> */}\n\n          <Content className=\"site-layout-background\">{children}</Content>\n        </Layout>\n      </Layout>\n    </Wrapper>\n  );\n};\n\nexport default MainLayout;\n","import { Switch } from \"react-router-dom\";\n\nimport AuthenticatedRoute from \"routes/AuthenticatedRoute\";\n\nimport { ListRequest } from \"domain/admin/Requests\";\nimport {\n  ListCategory,\n  NewCategory,\n  EditCategory,\n} from \"domain/admin/Categories\";\nimport { ListCourse, NewCourse, EditCourse } from \"domain/admin/Courses\";\nimport { ListUser, NewUser, EditUser } from \"domain/admin/Users\";\nimport AdminHomePage from \"domain/admin/HomePage\";\nimport MainLayout from \"domain/admin/layouts/MainLayout\";\n\nfunction App() {\n  return (\n    <Switch>\n      <MainLayout>\n        <AuthenticatedRoute exact path=\"/admin\" component={AdminHomePage} />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/requests\"\n          component={ListRequest}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories\"\n          component={ListCategory}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories/new\"\n          component={NewCategory}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories/:categoryId/edit\"\n          component={EditCategory}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses\"\n          component={ListCourse}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses/new\"\n          component={NewCourse}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses/:categoryId/edit\"\n          component={EditCourse}\n        />\n\n        <AuthenticatedRoute exact path=\"/admin/users\" component={ListUser} />\n        <AuthenticatedRoute exact path=\"/admin/users/new\" component={NewUser} />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/users/:userId/edit\"\n          component={EditUser}\n        />\n      </MainLayout>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst PublicRoute = ({ component: Component, ...restProps }) => {\n  const { isAuth } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) =>\n        !isAuth ? <Component {...props} /> : <Redirect to={{ pathname: \"/\" }} />\n      }\n    />\n  );\n};\n\nexport default PublicRoute;\n","const HomePage = () => {\n  return <h1>User home page</h1>;\n};\n\nexport default HomePage;\n","import { Switch } from \"react-router-dom\";\n\nimport AuthenticatedRoute from \"routes/AuthenticatedRoute\";\n\nimport UserHomePage from \"domain/user/HomePage\";\n\nfunction App() {\n  return (\n    <Switch>\n      <AuthenticatedRoute exact path=\"/\" component={UserHomePage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { AuthProvider } from \"contexts/auth\";\n\nimport SignInPage from \"containers/SignIn\";\n\nimport AdminRoutes from \"routes/AdminRoutes\";\nimport PublicRoute from \"routes/PublicRoute\";\nimport UserRoutes from \"routes/UserRoutes\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          <PublicRoute exact path=\"/sign_in\" component={SignInPage} />\n\n          <Route exact path=\"/\">\n            <UserRoutes />\n          </Route>\n\n          <Route path=\"/admin\">\n            <AdminRoutes />\n          </Route>\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}