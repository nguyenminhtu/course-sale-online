{"version":3,"sources":["contexts/auth/index.js","components/PageHeader/PageHeader.js","hooks/useRequest.js","containers/SignIn/SignIn.styles.js","containers/SignIn/SignIn.js","routes/AuthenticatedRoute/AuthenticatedRoute.js","components/EditButton/EditButton.js","components/DeleteButton/DeleteButton.js","components/NewButton/NewButton.js","components/HeaderArea/HeaderArea.styles.js","components/HeaderArea/HeaderArea.js","domain/admin/Courses/ListPage.styles.js","domain/admin/Courses/ListPage.js","domain/admin/Courses/NewPage.styles.js","domain/admin/Courses/NewPage.js","domain/admin/Courses/EditPage.js","domain/admin/Lessons/ListPage.styles.js","domain/admin/Lessons/ListPage.js","domain/admin/Lessons/NewPage.styles.js","domain/admin/Lessons/NewPage.js","domain/admin/Lessons/EditPage.js","domain/admin/Requests/ListPage.styles.js","domain/admin/Requests/ListPage.js","domain/admin/Users/ListPage.styles.js","domain/admin/Users/ListPage.js","domain/admin/Users/NewPage.styles.js","domain/admin/Users/NewPage.js","domain/admin/Users/EditPage.js","domain/admin/Categories/ListPage.styles.js","domain/admin/Categories/ListPage.js","domain/admin/Categories/NewPage.styles.js","domain/admin/Categories/NewPage.js","domain/admin/Categories/EditPage.js","domain/admin/Exams/ListPage.styles.js","domain/admin/Exams/ListPage.js","domain/admin/Exams/NewPage.styles.js","domain/admin/Exams/NewPage.js","domain/admin/Exams/EditPage.js","domain/admin/Questions/ListPage.styles.js","domain/admin/Questions/ListPage.js","domain/admin/Questions/NewPage.styles.js","domain/admin/Questions/NewPage.js","domain/admin/Questions/EditPage.js","domain/admin/HomePage/HomePage.js","layouts/AdminLayout/MenuItem.js","layouts/AdminLayout/AdminLayout.styles.js","layouts/AdminLayout/AdminLayout.js","routes/AdminRoutes/AdminRoutes.js","routes/PublicRoute/PublicRoute.js","domain/user/HomePage/HomePage.js","routes/UserRoutes/UserRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["initialStates","isAuth","localStorage","getItem","sessionStorage","accessToken","user","JSON","parse","AuthContext","createContext","AuthProvider","children","useReducer","state","action","type","payload","clear","dispatch","Provider","value","PageHeaderComponent","props","history","useHistory","onBack","goBack","useRequest","optionParams","useContext","useFetch","process","cachePolicy","interceptors","request","options","headers","Authorization","response","status","get","post","patch","delete","del","loading","error","data","styled","div","SignIn","Form","useForm","form","onFinish","useCallback","values","a","email","password","strategy","code","setFieldsValue","errorMessage","message","storage","remember","successMessage","setItem","stringify","setTimeout","spinning","useMemo","PageHeader","className","title","name","layout","initialValues","onChange","Item","noStyle","shouldUpdate","prevValues","curValues","getFieldValue","showIcon","label","rules","required","autoFocus","Password","valuePropName","htmlType","AuthenticatedRoute","Component","component","restProps","render","to","pathname","EditButton","icon","EditOutlined","style","backgroundColor","color","borderColor","DeleteButton","danger","MinusCircleOutlined","NewButton","path","PlusCircleOutlined","Search","Input","HeaderArea","selectedIds","onDelete","onSearch","newPath","searchPlaceHolder","customButtonArea","disabled","length","onClick","placeholder","enterButton","allowClear","columns","dataIndex","key","width","ListPage","total","useState","page","setPage","query","setQuery","setSelectedIds","useEffect","pageQuery","searchQuery","handleDeleteCourse","notification","success","placement","text","rowSelection","selectedRowKeys","dataSource","map","item","category","description","_id","push","pagination","pageSize","current","Option","Select","TextArea","NewPage","replace","span","offset","tooltip","InfoCircleOutlined","rows","EditPage","categoryId","useParams","categories","setCategories","categoriesResponse","getResponse","price","getCourseInfo","_","record","course","isFinish","handleDeleteLesson","formData","FormData","append","video","file","beforeUpload","accept","multiple","UploadOutlined","lessonId","courses","setCourses","coursesResponse","controls","height","src","Group","handleProcessRequest","handleDeleteRequest","CheckOutlined","border","CloseOutlined","note","role","sex","handleDeleteUser","dob","format","defaultValue","userId","username","phone","moment","getUserInfo","handleDeleteCategory","getCategoryInfo","handleDeleteExam","questionOptions","setQuestionOptions","questionList","setQuestionList","searchValue","newOptions","filter","question","toLowerCase","indexOf","id","onSelectQuestion","option","newQuestionList","questions","courseResponse","getData","onSelect","onClear","bordered","renderItem","questionData","setQuestionData","examId","questionResponse","handleDeleteQuestion","List","fields","add","remove","field","align","area","answers","fieldKey","block","PlusOutlined","questionId","handleSetAnswer","newAnswerList","answer","index","isTrue","HomePage","MenuItem","theme","mode","defaultSelectedKeys","BarsOutlined","AlertOutlined","BookOutlined","UserOutlined","VideoCameraOutlined","FileOutlined","QuestionCircleOutlined","Header","Layout","Content","Sider","AdminLayout","collapsed","setCollapsed","collapsible","onCollapse","overlay","SelectOutlined","LogoutOutlined","size","App","exact","AdminHomePage","ListRequest","ListCategory","NewCategory","EditCategory","ListLesson","NewLesson","EditLesson","ListCourse","NewCourse","EditCourse","ListQuestion","NewQuestion","EditQuestion","ListExam","NewExam","EditExam","ListUser","NewUser","EditUser","PublicRoute","UserHomePage","SignInPage","UserRoutes","AdminRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.deb6c94e.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\n\nconst initialStates = {\n  isAuth:\n    localStorage.getItem(\"isAuth\") || sessionStorage.getItem(\"isAuth\") || false,\n  accessToken:\n    localStorage.getItem(\"accessToken\") ||\n    sessionStorage.getItem(\"accessToken\") ||\n    null,\n  user: localStorage.getItem(\"user\")\n    ? JSON.parse(localStorage.getItem(\"user\"))\n    : sessionStorage.getItem(\"user\")\n    ? JSON.parse(sessionStorage.getItem(\"user\"))\n    : null,\n};\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"login\":\n        return {\n          isAuth: true,\n          accessToken: action.payload.accessToken,\n          user: action.payload.user,\n        };\n\n      case \"logout\":\n        localStorage.clear();\n        sessionStorage.clear();\n        return { isAuth: false, accessToken: null, user: {} };\n\n      default: {\n        return { ...initialStates };\n      }\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialStates);\n\n  return (\n    <AuthContext.Provider value={{ ...state, dispatch }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","import { PageHeader } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\n\nconst PageHeaderComponent = (props) => {\n  const history = useHistory();\n\n  return <PageHeader onBack={() => history.goBack()} {...props} />;\n};\n\nexport default PageHeaderComponent;\n","import { useContext } from \"react\";\nimport useFetch from \"use-http\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst useRequest = ({ optionParams = {} }) => {\n  const { accessToken, dispatch } = useContext(AuthContext);\n\n  const { get, post, patch, del, loading, error, data } = useFetch(\n    process.env.REACT_APP_API_URL,\n    {\n      ...optionParams,\n      cachePolicy: \"no-cache\",\n      interceptors: {\n        request: ({ options }) => ({\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }),\n        response: ({ response }) => {\n          if (!!accessToken && response.status === 401) {\n            dispatch({ type: \"logout\" });\n            return;\n          }\n          return response;\n        },\n      },\n    }\n  );\n\n  return { get, post, patch, delete: del, loading, error, response: data };\n};\n\nexport default useRequest;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #777;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .ant-page-header {\n    padding-top: 0;\n  }\n\n  & > div {\n    width: 400px;\n    background-color: #fff;\n    padding: 24px;\n    border-radius: 8px;\n\n    .sign-in-title {\n      .ant-page-header-heading {\n        justify-content: center;\n      }\n    }\n\n    .ant-alert {\n      margin-bottom: 16px;\n    }\n\n    .ant-form-item:last-child {\n      margin-bottom: 0 !important;\n      text-align: center;\n    }\n  }\n`;\n","import { Form, Input, Button, Checkbox, Spin, Alert } from \"antd\";\nimport { useCallback, useMemo, useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./SignIn.styles\";\n\nconst SignIn = () => {\n  const { dispatch } = useContext(AuthContext);\n  const { post, loading } = useRequest({});\n\n  const [form] = Form.useForm();\n\n  const onFinish = useCallback(\n    async (values) => {\n      const response = await post(\"/authentication\", {\n        email: values.email,\n        password: values.password,\n        strategy: \"local\",\n      });\n\n      if (response.code) {\n        form.setFieldsValue({ errorMessage: response.message });\n        return;\n      }\n\n      const storage = values.remember ? localStorage : sessionStorage;\n\n      const { accessToken, user } = response;\n\n      form.setFieldsValue({ successMessage: \"Login successfully\" });\n      storage.setItem(\"accessToken\", accessToken);\n      storage.setItem(\"user\", JSON.stringify(user));\n      storage.setItem(\"isAuth\", true);\n\n      setTimeout(() => {\n        dispatch({\n          type: \"login\",\n          payload: { user, accessToken },\n        });\n      }, 300);\n    },\n    [dispatch, form, post]\n  );\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        <div>\n          {useMemo(\n            () => (\n              <PageHeaderComponent\n                className=\"sign-in-title\"\n                title=\"SIGN IN\"\n                onBack={null}\n              />\n            ),\n            []\n          )}\n\n          {useMemo(\n            () => (\n              <Form\n                form={form}\n                name=\"basic\"\n                layout=\"vertical\"\n                initialValues={{ errorMessage: null }}\n                onFinish={onFinish}\n                onChange={() => form.setFieldsValue({ errorMessage: null })}\n              >\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.errorMessage !== curValues.errorMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"errorMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"errorMessage\")}\n                        type=\"error\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.successMessage !== curValues.successMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"successMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"successMessage\")}\n                        type=\"success\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Email\"\n                  name=\"email\"\n                  rules={[\n                    {\n                      required: true,\n                      type: \"email\",\n                      message: \"Please input your valid email!\",\n                    },\n                  ]}\n                >\n                  <Input autoFocus />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Password\"\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your password!\" },\n                  ]}\n                >\n                  <Input.Password />\n                </Form.Item>\n\n                <Form.Item name=\"remember\" valuePropName=\"checked\">\n                  <Checkbox>Remember me</Checkbox>\n                </Form.Item>\n\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Login\n                  </Button>\n                </Form.Item>\n              </Form>\n            ),\n            [form, onFinish]\n          )}\n        </div>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default SignIn;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst AuthenticatedRoute = ({ component: Component, ...restProps }) => {\n  const { isAuth } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) =>\n        isAuth ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/sign_in\" }} />\n        )\n      }\n    />\n  );\n};\n\nexport default AuthenticatedRoute;\n","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\nconst EditButton = (props) => {\n  return (\n    <Button\n      icon={<EditOutlined />}\n      type=\"ghost\"\n      style={{\n        backgroundColor: \"#fff3cd\",\n        color: \"#856404\",\n        borderColor: \"#ffeeba\",\n      }}\n      {...props}\n    >\n      Edit\n    </Button>\n  );\n};\n\nexport default EditButton;\n","import { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\nconst DeleteButton = (props) => {\n  return (\n    <Button type=\"primary\" danger icon={<MinusCircleOutlined />} {...props}>\n      Delete\n    </Button>\n  );\n};\n\nexport default DeleteButton;\n","import { Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\n\nconst NewButton = ({ path }) => {\n  return (\n    <Link to={path}>\n      <Button type=\"primary\" icon={<PlusCircleOutlined />}>\n        New\n      </Button>\n    </Link>\n  );\n};\n\nexport default NewButton;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 16px 16px;\n\n  .search-area {\n    width: 35%;\n  }\n\n  .button-area {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n\n    button {\n      margin-left: 8px;\n    }\n  }\n`;\n","import { Input } from \"antd\";\nimport { useMemo } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport NewButton from \"components/NewButton\";\nimport Wrapper from \"./HeaderArea.styles\";\n\nconst { Search } = Input;\n\nconst HeaderArea = ({\n  selectedIds,\n  onDelete,\n  onSearch,\n  newPath,\n  searchPlaceHolder,\n  customButtonArea,\n}) => {\n  return (\n    <Wrapper>\n      {!!customButtonArea && customButtonArea}\n\n      {!customButtonArea && (\n        <div className=\"button-area\">\n          <NewButton path={newPath} />\n\n          <DeleteButton disabled={!selectedIds.length} onClick={onDelete} />\n        </div>\n      )}\n\n      <div className=\"search-area\">\n        {useMemo(\n          () => (\n            <Search\n              onSearch={onSearch}\n              placeholder={searchPlaceHolder}\n              enterButton=\"Search\"\n              allowClear\n            />\n          ),\n          [onSearch, searchPlaceHolder]\n        )}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default HeaderArea;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n\n  .description-column {\n    max-width: 460px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-bottom: 0;\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport EditButton from \"components/EditButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Category\",\n    dataIndex: \"category\",\n    key: \"category\",\n  },\n  {\n    title: \"Price\",\n    dataIndex: \"price\",\n    key: \"price\",\n  },\n  {\n    title: \"Description\",\n    dataIndex: \"description\",\n    key: \"description\",\n    width: \"40%\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/courses?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteCourse = useCallback(async () => {\n    await post(\"/remove_courses\", { selectedIds });\n    notification.success({\n      message: \"Delete course successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List course\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            newPath=\"/admin/courses/new\"\n            searchPlaceHolder=\"Search course by name\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteCourse}\n            onSearch={(text) => setQuery(text)}\n          />\n        ),\n        [handleDeleteCourse, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    category: item.category.name,\n                    description: (\n                      <p className=\"description-column\">{item.description}</p>\n                    ),\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/courses/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const responseCourse = await post(\"/courses\", data);\n      if (responseCourse._id) {\n        notification.success({\n          message: \"Create course successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/courses\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/categories\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New course\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    name=\"category\"\n                    label=\"Category\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a category\" allowClear>\n                      {response.data &&\n                        response.data.map((category) => (\n                          <Option key={category._id} value={category._id}>\n                            {category.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Price\"\n                    name=\"price\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <TextArea rows={6} />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst EditPage = () => {\n  const { categoryId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n\n  const [categories, setCategories] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/courses/${categoryId}`, data);\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update course successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/courses\");\n      }\n    },\n    [categoryId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const categoriesResponse = await get(\"/categories\");\n      setCategories(categoriesResponse.data);\n\n      if (categoryId) {\n        const getResponse = await get(`/courses/${categoryId}`);\n        form.setFieldsValue({\n          name: getResponse.name,\n          category: getResponse.category,\n          description: getResponse.description,\n          price: getResponse.price,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [categoryId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit course\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Course not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        name=\"category\"\n                        label=\"Category\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a category\" allowClear>\n                          {categories.map((category) => (\n                            <Option key={category._id} value={category._id}>\n                              {category.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Price\"\n                        name=\"price\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Description\"\n                        name=\"description\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <TextArea rows={6} />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [categories, form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Is Finish\",\n    dataIndex: \"isFinish\",\n    key: \"isFinish\",\n    render: (_, record) => {\n      return record.isFinish ? \"Finished\" : \"Not yet\";\n    },\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/lessons?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteLesson = useCallback(async () => {\n    await post(\"/remove_lessons\", { selectedIds });\n    notification.success({\n      message: \"Delete lesson successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List lesson\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search lesson by name\"\n            newPath=\"/admin/lessons/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteLesson}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteLesson, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/lessons/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n\n    .upload-wrapper {\n      .ant-upload,\n      button {\n        width: 100%;\n      }\n    }\n\n    video {\n      object-fit: fill;\n      margin-bottom: 24px;\n    }\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Upload,\n} from \"antd\";\nimport { InfoCircleOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = new FormData();\n      formData.append(\"name\", data.name);\n      formData.append(\"course\", data.course);\n      formData.append(\"video\", data.video.file);\n      const postResponse = await post(\"/lessons\", formData);\n\n      if (postResponse._id) {\n        notification.success({\n          message: \"Create lesson successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/lessons\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/courses\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New lesson\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Lesson name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"course\"\n                    label=\"Course\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a course\" allowClear>\n                      {response.data &&\n                        response.data.map((course) => (\n                          <Option key={course._id} value={course._id}>\n                            {course.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Video\"\n                    name=\"video\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                    valuePropName=\"video\"\n                  >\n                    <Upload\n                      className=\"upload-wrapper\"\n                      beforeUpload={() => false}\n                      accept=\"video/mp4\"\n                      multiple={false}\n                    >\n                      <Button icon={<UploadOutlined />}>Upload video</Button>\n                    </Upload>\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Upload,\n  Radio,\n} from \"antd\";\nimport { InfoCircleOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const { lessonId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const [courses, setCourses] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      let formData = {\n        name: data.name,\n        course: data.course,\n        isFinish: data.isFinish,\n      };\n\n      if (typeof data.video !== \"string\") {\n        formData = new FormData();\n        formData.append(\"name\", data.name);\n        formData.append(\"course\", data.course);\n        formData.append(\"video\", data.video.file);\n        formData.append(\"oldVideo\", response.video);\n        formData.append(\"isFinish\", data.isFinish);\n      }\n\n      const patchResponse = await patch(`/lessons/${lessonId}`, formData);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update lesson successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/lessons\");\n      }\n    },\n    [history, lessonId, patch, response.video]\n  );\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const coursesResponse = await get(\"/courses\");\n      setCourses(coursesResponse.data);\n\n      if (lessonId) {\n        const getResponse = await get(`/lessons/${lessonId}`);\n        form.setFieldsValue({\n          name: getResponse.name,\n          course: getResponse.course,\n          video: getResponse.video,\n          isFinish: getResponse.isFinish,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [lessonId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"Edit lesson\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Lesson not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Lesson name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item\n                        name=\"course\"\n                        label=\"Course\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a course\" allowClear>\n                          {courses.map((course) => (\n                            <Option key={course._id} value={course._id}>\n                              {course.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Video\"\n                        name=\"video\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                        valuePropName=\"video\"\n                      >\n                        <Upload\n                          className=\"upload-wrapper\"\n                          beforeUpload={() => false}\n                          accept=\"video/mp4\"\n                        >\n                          <Button icon={<UploadOutlined />}>\n                            Upload video\n                          </Button>\n                        </Upload>\n                      </Form.Item>\n\n                      {response.video && (\n                        <Form.Item noStyle shouldUpdate={false}>\n                          <video controls width=\"100%\" height=\"300\">\n                            <source\n                              src={`${process.env.REACT_APP_API_URL}${response.video}`}\n                              type=\"video/mp4\"\n                            />\n                            Your browser does not support the video tag.\n                          </video>\n                        </Form.Item>\n                      )}\n\n                      <Form.Item\n                        name=\"isFinish\"\n                        label=\"Is lesson finish\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Radio.Group>\n                          <Radio value={true}>Yes</Radio>\n                          <Radio value={false}>Not Yet</Radio>\n                        </Radio.Group>\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [courses, form, onFinish, response._id, response.code, response.video]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n\n  .note-column {\n    max-width: 460px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-bottom: 0;\n  }\n`;\n","import { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { Table, Button, Tag, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User\",\n    dataIndex: \"user\",\n    key: \"user\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n  },\n  {\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n  },\n  {\n    title: \"Note\",\n    dataIndex: \"note\",\n    key: \"note\",\n    width: \"40%\",\n  },\n];\n\nconst ListPage = () => {\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    get(`/requests?${pageQuery}`);\n  }, [get, page]);\n\n  const handleProcessRequest = useCallback(\n    async (type) => {\n      await post(\"/process_requests\", { selectedIds, type });\n      notification.success({\n        message: `${\n          type === \"approve\" ? \"Approve\" : \"Reject\"\n        } request successfully`,\n        placement: \"topRight\",\n      });\n      setSelectedIds([]);\n      setPage(1);\n    },\n    [post, selectedIds]\n  );\n\n  const handleDeleteRequest = useCallback(async () => {\n    await post(\"/remove_requests\", { selectedIds });\n    notification.success({\n      message: \"Delete request successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List request\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            selectedIds={selectedIds}\n            onDelete={null}\n            searchPlaceHolder=\"Search request by user name or course name\"\n            customButtonArea={\n              <div className=\"button-area\">\n                <Button\n                  icon={<CheckOutlined style={{ color: \"#52c41a\" }} />}\n                  disabled={!selectedIds.length}\n                  type=\"ghost\"\n                  style={{\n                    backgroundColor: \"#f6ffed\",\n                    border: \"1px solid #b7eb8f\",\n                  }}\n                  onClick={() => handleProcessRequest(\"approve\")}\n                >\n                  Approve\n                </Button>\n\n                <Button\n                  icon={<CloseOutlined style={{ color: \"#ff4d4f\" }} />}\n                  disabled={!selectedIds.length}\n                  onClick={() => handleProcessRequest(\"reject\")}\n                  type=\"ghost\"\n                  style={{\n                    backgroundColor: \"#fff2f0\",\n                    border: \"1px solid #ffccc7\",\n                  }}\n                >\n                  Reject\n                </Button>\n\n                <DeleteButton\n                  disabled={!selectedIds.length}\n                  onClick={handleDeleteRequest}\n                />\n              </div>\n            }\n          />\n        ),\n        [handleDeleteRequest, handleProcessRequest, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    user: item.user && item.user.email,\n                    course: item.course && item.course.name,\n                    note: <p className=\"note-column\">{item.note}</p>,\n                    status:\n                      item.status === \"waiting\" ? (\n                        <Tag color=\"gold\">{item.status}</Tag>\n                      ) : item.status === \"approved\" ? (\n                        <Tag color=\"green\">{item.status}</Tag>\n                      ) : (\n                        <Tag color=\"red\">{item.status}</Tag>\n                      ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User Name\",\n    dataIndex: \"username\",\n    key: \"username\",\n  },\n  {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\",\n  },\n  {\n    title: \"Role\",\n    dataIndex: \"role\",\n    key: \"role\",\n    render: (_, record) => {\n      return record.role ? \"User\" : \"Admin\";\n    },\n  },\n  {\n    title: \"Birthday\",\n    dataIndex: \"dob\",\n    key: \"dob\",\n  },\n  {\n    title: \"Sex\",\n    dataIndex: \"sex\",\n    key: \"sex\",\n    render: (_, record) => {\n      return record.sex === 0 ? \"Male\" : record.sex === 1 ? \"Female\" : \"Other\";\n    },\n  },\n  {\n    title: \"Phone\",\n    dataIndex: \"phone\",\n    key: \"phone\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/users?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteUser = useCallback(async () => {\n    await post(\"/remove_users\", { selectedIds });\n    notification.success({\n      message: \"Delete user successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List user\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search user by name\"\n            newPath=\"/admin/users/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteUser}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteUser, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/users/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  Select,\n  DatePicker,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { post, loading } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = { ...data, dob: data.dob.format(\"DD/MM/YYYY\") };\n      const response = await post(\"/users\", formData);\n\n      if (response._id) {\n        notification.success({\n          message: \"Create user successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/users\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New user\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"username\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Email\"\n                    name=\"email\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      {\n                        required: true,\n                        type: \"email\",\n                        message: \"Please input your valid email!\",\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Password\"\n                    name=\"password\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      {\n                        required: true,\n                        message: \"This field is required\",\n                      },\n                    ]}\n                  >\n                    <Input.Password />\n                  </Form.Item>\n\n                  <Form.Item label=\"Role\" name=\"role\">\n                    <Select defaultValue={1}>\n                      <Option key=\"0\" value={0}>\n                        Admin\n                      </Option>\n                      <Option key=\"1\" value={1}>\n                        User\n                      </Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Sex\" name=\"sex\">\n                    <Select>\n                      <Option key=\"0\" value={0}>\n                        Male\n                      </Option>\n                      <Option key=\"1\" value={1}>\n                        Female\n                      </Option>\n                      <Option key=\"2\" value={2}>\n                        Other\n                      </Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Birthday\" name=\"dob\">\n                    <DatePicker\n                      placeholder=\"\"\n                      style={{ width: \"100%\" }}\n                      format=\"DD/MM/YYYY\"\n                    />\n                  </Form.Item>\n\n                  <Form.Item label=\"Phone\" name=\"phone\">\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  DatePicker,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const history = useHistory();\n  const { userId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = { ...data, dob: data.dob.format(\"DD/MM/YYYY\") };\n      const patchResponse = await patch(`/users/${userId}`, formData);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update user successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/users\");\n      }\n    },\n    [userId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getUserInfo = async () => {\n      if (userId) {\n        const getResponse = await get(`/users/${userId}`);\n        form.setFieldsValue({\n          username: getResponse.username,\n          email: getResponse.email,\n          role: getResponse.role,\n          password: getResponse.password,\n          phone: getResponse.phone || \"\",\n          dob: getResponse.dob ? moment(getResponse.dob, \"DD/MM/YYYY\") : \"\",\n          sex:\n            getResponse.sex !== \"null\" || getResponse.sex !== \"undefined\"\n              ? getResponse.sex\n              : \"\",\n        });\n      }\n    };\n\n    getUserInfo();\n  }, [userId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit user\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>User not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"username\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Email\"\n                        name=\"email\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          {\n                            required: true,\n                            type: \"email\",\n                            message: \"Please input your valid email!\",\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item label=\"Password\" name=\"password\">\n                        <Input.Password />\n                      </Form.Item>\n\n                      <Form.Item label=\"Role\" name=\"role\">\n                        <Select defaultValue={1}>\n                          <Option key=\"0\" value={0}>\n                            Admin\n                          </Option>\n                          <Option key=\"1\" value={1}>\n                            User\n                          </Option>\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item label=\"Sex\" name=\"sex\">\n                        <Select>\n                          <Option key=\"0\" value={0}>\n                            Male\n                          </Option>\n                          <Option key=\"1\" value={1}>\n                            Female\n                          </Option>\n                          <Option key=\"2\" value={2}>\n                            Other\n                          </Option>\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item label=\"Birthday\" name=\"dob\">\n                        <DatePicker\n                          placeholder=\"\"\n                          style={{ width: \"100%\" }}\n                          format=\"DD/MM/YYYY\"\n                        />\n                      </Form.Item>\n\n                      <Form.Item label=\"Phone\" name=\"phone\">\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/categories?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteCategory = useCallback(async () => {\n    await post(\"/remove_categories\", { selectedIds });\n    notification.success({\n      message: \"Delete category successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List category\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search category by name\"\n            newPath=\"/admin/categories/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteCategory}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteCategory, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/categories/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import { Form, Input, Button, Spin, Row, Col, notification } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    (data) => {\n      post(\"/categories\", data);\n    },\n    [post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (response._id) {\n      notification.success({\n        message: \"Create category successfully\",\n        placement: \"topRight\",\n      });\n      history.replace(\"/admin/categories\");\n    }\n  }, [history, response]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New category\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Category name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import { Form, Input, Button, Spin, Row, Col, notification } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst EditPage = () => {\n  const history = useHistory();\n  const { categoryId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/categories/${categoryId}`, data);\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update category successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/categories\");\n      }\n    },\n    [categoryId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getCategoryInfo = async () => {\n      if (categoryId) {\n        const getResponse = await get(`/categories/${categoryId}`);\n        form.setFieldsValue({ name: getResponse.name });\n      }\n    };\n\n    getCategoryInfo();\n  }, [categoryId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit category\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Category not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Category name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Is finish\",\n    dataIndex: \"isFinish\",\n    key: \"isFinish\",\n    render: (_, record) => {\n      return record.isFinish ? \"Finshed\" : \"Not yet\";\n    },\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/exams?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteExam = useCallback(async () => {\n    await post(\"/remove_exams\", { selectedIds });\n    notification.success({\n      message: \"Delete exam successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List exam\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search exam by name\"\n            newPath=\"/admin/exams/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteExam}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteExam, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/exams/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n\n    .ant-space {\n      display: flex;\n    }\n\n    .ant-space-align-baseline {\n      align-items: center;\n    }\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  AutoComplete,\n  List,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const [courses, setCourses] = useState([]);\n  const [questionOptions, setQuestionOptions] = useState([]);\n  const [questionList, setQuestionList] = useState([]);\n\n  const history = useHistory();\n  const { get, post, loading, response = { data: [] } } = useRequest({});\n\n  const onSearch = useCallback(\n    (searchValue) => {\n      if (!searchValue) {\n        return;\n      }\n\n      const newOptions = response.data\n        .filter(\n          (question) =>\n            question.title.toLowerCase().indexOf(searchValue.toLowerCase()) > -1\n        )\n        .map((question) => ({ value: question.title, id: question._id }));\n      setQuestionOptions(newOptions);\n    },\n    [response.data]\n  );\n\n  const onSelectQuestion = useCallback(\n    (_, option) => {\n      const newQuestionList = [\n        ...questionList.filter((question) => question.id !== option.id),\n        option,\n      ];\n      setQuestionList(newQuestionList);\n    },\n    [questionList]\n  );\n\n  const onFinish = useCallback(\n    async (data) => {\n      const postResponse = await post(\"/exams\", {\n        ...data,\n        questions: questionList.map((question) => question.id),\n      });\n\n      if (postResponse._id) {\n        notification.success({\n          message: \"Create exam successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/exams\");\n      }\n    },\n    [history, post, questionList]\n  );\n\n  useEffect(() => {\n    const getData = async () => {\n      const courseResponse = await get(\"/courses\");\n      setCourses(courseResponse.data);\n\n      get(\"/questions?limit=1000&skip=0\");\n    };\n\n    getData();\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New exam\" />\n          ),\n          []\n        )}\n\n        <Row>\n          <Col span={10} offset={7}>\n            <Form layout=\"vertical\" onFinish={onFinish}>\n              {useMemo(\n                () => (\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n                ),\n                []\n              )}\n\n              {useMemo(\n                () => (\n                  <Form.Item\n                    label=\"Course\"\n                    name=\"course\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a course\" allowClear>\n                      {courses.map((course) => (\n                        <Option key={course._id} value={course._id}>\n                          {course.name}\n                        </Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                ),\n                [courses]\n              )}\n\n              {useMemo(\n                () => (\n                  <Form.Item label=\"Questions\">\n                    <AutoComplete\n                      options={questionOptions}\n                      style={{\n                        width: \"100%\",\n                      }}\n                      onSelect={onSelectQuestion}\n                      onSearch={onSearch}\n                      placeholder=\"Autocomplete search question to add\"\n                      onClear={() => setQuestionOptions([])}\n                      allowClear\n                    />\n\n                    <List\n                      bordered\n                      dataSource={questionList}\n                      renderItem={(item) => <List.Item>{item.value}</List.Item>}\n                    />\n                  </Form.Item>\n                ),\n                [onSearch, onSelectQuestion, questionList, questionOptions]\n              )}\n\n              {useMemo(\n                () => (\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                ),\n                []\n              )}\n            </Form>\n          </Col>\n        </Row>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  AutoComplete,\n  List,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const [courses, setCourses] = useState([]);\n  const [questionData, setQuestionData] = useState([]);\n  const [questionOptions, setQuestionOptions] = useState([]);\n  const [questionList, setQuestionList] = useState([]);\n\n  const { get, patch, loading, response = {} } = useRequest({});\n  const { examId } = useParams();\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const onSearch = useCallback(\n    (searchValue) => {\n      if (!searchValue) {\n        return;\n      }\n\n      const newOptions = questionData\n        .filter(\n          (question) =>\n            question.title.toLowerCase().indexOf(searchValue.toLowerCase()) > -1\n        )\n        .map((question) => ({ value: question.title, id: question._id }));\n      setQuestionOptions(newOptions);\n    },\n    [questionData]\n  );\n\n  const onSelectQuestion = useCallback(\n    (_, option) => {\n      const newQuestionList = [\n        ...questionList.filter((question) => question.id !== option.id),\n        option,\n      ];\n      setQuestionList(newQuestionList);\n    },\n    [questionList]\n  );\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/exams/${examId}`, {\n        ...data,\n        questions: questionList.map((question) => question.id),\n      });\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update exam successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/exams\");\n      }\n    },\n    [examId, history, patch, questionList]\n  );\n\n  useEffect(() => {\n    const getData = async () => {\n      const courseResponse = await get(\"/courses\");\n      setCourses(courseResponse.data);\n\n      const questionResponse = await get(\"/questions?limit=1000&skip=0\");\n      setQuestionData(questionResponse.data);\n\n      if (!examId) {\n        return;\n      }\n\n      const getResponse = await get(`/exams/${examId}`);\n\n      if (!getResponse._id) {\n        return;\n      }\n\n      form.setFieldsValue({\n        name: getResponse.name,\n        course: getResponse.course,\n      });\n\n      setQuestionList(\n        getResponse.questions.map((question) => ({\n          value: question.title,\n          id: question._id,\n        }))\n      );\n    };\n\n    getData();\n  }, [examId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New exam\" />\n          ),\n          []\n        )}\n\n        <Row>\n          <Col span={10} offset={7}>\n            <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n              {response.code && <p>Exam not found</p>}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [response._id]\n              )}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item\n                        label=\"Course\"\n                        name=\"course\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a course\" allowClear>\n                          {courses.map((course) => (\n                            <Option key={course._id} value={course._id}>\n                              {course.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [courses, response._id]\n              )}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item label=\"Questions\">\n                        <AutoComplete\n                          options={questionOptions}\n                          style={{\n                            width: \"100%\",\n                          }}\n                          onSelect={onSelectQuestion}\n                          onSearch={onSearch}\n                          placeholder=\"Autocomplete search question to add\"\n                          onClear={() => setQuestionOptions([])}\n                          allowClear\n                        />\n\n                        <List\n                          bordered\n                          dataSource={questionList}\n                          renderItem={(item) => (\n                            <List.Item>{item.value}</List.Item>\n                          )}\n                        />\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [\n                  onSearch,\n                  onSelectQuestion,\n                  questionList,\n                  questionOptions,\n                  response._id,\n                ]\n              )}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [response._id]\n              )}\n            </Form>\n          </Col>\n        </Row>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Title\",\n    dataIndex: \"title\",\n    key: \"title\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/questions?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteQuestion = useCallback(async () => {\n    await post(\"/remove_questions\", { selectedIds });\n    notification.success({\n      message: \"Delete question successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List question\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search question by title\"\n            newPath=\"/admin/questions/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteQuestion}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteQuestion, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/questions/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n\n    .ant-space {\n      display: flex;\n    }\n\n    .ant-space-align-baseline {\n      align-items: center;\n    }\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Space,\n  Radio,\n} from \"antd\";\nimport {\n  InfoCircleOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const postResponse = await post(\"/questions\", data);\n\n      if (postResponse._id) {\n        notification.success({\n          message: \"Create question successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/questions\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/courses\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New question\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Title\"\n                    name=\"title\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"course\"\n                    label=\"Course\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a course\" allowClear>\n                      {response.data &&\n                        response.data.map((course) => (\n                          <Option key={course._id} value={course._id}>\n                            {course.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.List name=\"answers\">\n                    {(fields, { add, remove }) => (\n                      <>\n                        {fields.map((field) => (\n                          <Space key={field.key} align=\"baseline\">\n                            <Form.Item\n                              noStyle\n                              shouldUpdate={(prevValues, curValues) =>\n                                prevValues.area !== curValues.area ||\n                                prevValues.answers !== curValues.answers\n                              }\n                            >\n                              {() => (\n                                <Form.Item\n                                  {...field}\n                                  label=\"Content\"\n                                  name={[field.name, \"content\"]}\n                                  fieldKey={[field.fieldKey, \"content\"]}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Missing content\",\n                                    },\n                                  ]}\n                                >\n                                  <Input placeholder=\"For Ex: A. or 1.\" />\n                                </Form.Item>\n                              )}\n                            </Form.Item>\n\n                            <Form.Item\n                              {...field}\n                              label=\"Value\"\n                              name={[field.name, \"value\"]}\n                              fieldKey={[field.fieldKey, \"value\"]}\n                              rules={[\n                                { required: true, message: \"Missing value\" },\n                              ]}\n                            >\n                              <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                              {...field}\n                              label=\"Is True\"\n                              name={[field.name, \"isTrue\"]}\n                              fieldKey={[field.fieldKey, \"isTrue\"]}\n                            >\n                              <Radio.Group>\n                                <Radio value={true}>Yes</Radio>\n                              </Radio.Group>\n                            </Form.Item>\n\n                            <MinusCircleOutlined\n                              onClick={() => remove(field.name)}\n                            />\n                          </Space>\n                        ))}\n\n                        <Form.Item>\n                          <Button\n                            type=\"dashed\"\n                            onClick={() => add()}\n                            block\n                            icon={<PlusOutlined />}\n                          >\n                            Add answers\n                          </Button>\n                        </Form.Item>\n                      </>\n                    )}\n                  </Form.List>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Radio,\n  Space,\n} from \"antd\";\nimport {\n  InfoCircleOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const { questionId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const [courses, setCourses] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/questions/${questionId}`, data);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update question successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/questions\");\n      }\n    },\n    [history, questionId, patch]\n  );\n\n  const handleSetAnswer = useCallback(\n    (field) => {\n      const oldAnswerList = form.getFieldValue(\"answers\");\n      const newAnswerList = oldAnswerList.map((answer, index) => {\n        if (index === field.key) {\n          return answer;\n        }\n\n        return { ...answer, isTrue: false };\n      });\n\n      form.setFieldsValue({ answers: newAnswerList });\n    },\n    [form]\n  );\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const coursesResponse = await get(\"/courses\");\n      setCourses(coursesResponse.data);\n\n      if (questionId) {\n        const getResponse = await get(`/questions/${questionId}`);\n        form.setFieldsValue({\n          title: getResponse.title,\n          course: getResponse.course,\n          answers: getResponse.answers,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [questionId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"Edit question\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Question not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Title\"\n                        name=\"title\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item\n                        name=\"course\"\n                        label=\"Course\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a course\" allowClear>\n                          {courses.map((course) => (\n                            <Option key={course._id} value={course._id}>\n                              {course.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.List name=\"answers\">\n                        {(fields, { add, remove }) => (\n                          <>\n                            {fields.map((field) => (\n                              <Space key={field.key} align=\"baseline\">\n                                <Form.Item\n                                  noStyle\n                                  shouldUpdate={(prevValues, curValues) =>\n                                    prevValues.answers !== curValues.answers\n                                  }\n                                >\n                                  {() => (\n                                    <Form.Item\n                                      {...field}\n                                      label=\"Content\"\n                                      name={[field.name, \"content\"]}\n                                      fieldKey={[field.fieldKey, \"content\"]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Missing content\",\n                                        },\n                                      ]}\n                                    >\n                                      <Input placeholder=\"For Ex: A. or 1.\" />\n                                    </Form.Item>\n                                  )}\n                                </Form.Item>\n\n                                <Form.Item\n                                  {...field}\n                                  label=\"Value\"\n                                  name={[field.name, \"value\"]}\n                                  fieldKey={[field.fieldKey, \"value\"]}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Missing value\",\n                                    },\n                                  ]}\n                                >\n                                  <Input />\n                                </Form.Item>\n\n                                <Form.Item\n                                  {...field}\n                                  label=\"Is True\"\n                                  name={[field.name, \"isTrue\"]}\n                                  fieldKey={[field.fieldKey, \"isTrue\"]}\n                                >\n                                  <Radio.Group\n                                    onChange={() => handleSetAnswer(field)}\n                                  >\n                                    <Radio value={true}>Yes</Radio>\n                                  </Radio.Group>\n                                </Form.Item>\n\n                                <MinusCircleOutlined\n                                  onClick={() => remove(field.name)}\n                                />\n                              </Space>\n                            ))}\n\n                            <Form.Item>\n                              <Button\n                                type=\"dashed\"\n                                onClick={() => add()}\n                                block\n                                icon={<PlusOutlined />}\n                              >\n                                Add answers\n                              </Button>\n                            </Form.Item>\n                          </>\n                        )}\n                      </Form.List>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [\n            courses,\n            form,\n            handleSetAnswer,\n            onFinish,\n            response._id,\n            response.code,\n          ]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","const HomePage = () => {\n  return <h1>Home page admin</h1>;\n};\n\nexport default HomePage;\n","import { Menu } from \"antd\";\nimport {\n  UserOutlined,\n  VideoCameraOutlined,\n  AlertOutlined,\n  BookOutlined,\n  FileOutlined,\n  QuestionCircleOutlined,\n  BarsOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\n\nconst MenuItem = () => {\n  return (\n    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[]}>\n      <Menu.Item key=\"category\" icon={<BarsOutlined />}>\n        <Link to=\"/admin/categories\">Categories</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"request\" icon={<AlertOutlined />}>\n        <Link to=\"/admin/requests\">Requests</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"course\" icon={<BookOutlined />}>\n        <Link to=\"/admin/courses\">Courses</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"user\" icon={<UserOutlined />}>\n        <Link to=\"/admin/users\">Users</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"lesson\" icon={<VideoCameraOutlined />}>\n        <Link to=\"/admin/lessons\">Lessons</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"exam\" icon={<FileOutlined />}>\n        <Link to=\"/admin/exams\">Exams</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"question\" icon={<QuestionCircleOutlined />}>\n        <Link to=\"/admin/questions\">Questions</Link>\n      </Menu.Item>\n    </Menu>\n  );\n};\n\nexport default MenuItem;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  min-height: 100vh;\n\n  .ant-layout {\n    min-height: 100vh;\n  }\n\n  .ant-layout-sider-collapsed {\n    .logo {\n      font-size: 12px !important;\n    }\n  }\n\n  .ant-layout-header {\n    height: 60px;\n  }\n\n  .logo {\n    min-height: 32px;\n    margin: 16px;\n    color: #fff;\n    font-size: 23px;\n    text-align: center;\n  }\n\n  .site-layout .site-layout-background {\n    background: #fff;\n  }\n\n  header.site-layout-background {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: 0 24px 0 0;\n  }\n\n  main.site-layout-background {\n    margin: 16px 16px;\n    /* padding: 24px; */\n  }\n`;\n","import { useState, useContext } from \"react\";\nimport { Layout, Menu, Avatar, Dropdown } from \"antd\";\nimport {\n  UserOutlined,\n  SelectOutlined,\n  LogoutOutlined,\n} from \"@ant-design/icons\";\n\nimport AuthContext from \"contexts/auth\";\nimport MenuItem from \"./MenuItem\";\nimport Wrapper from \"./AdminLayout.styles\";\n\nconst { Header, Content, Sider } = Layout;\n\nconst AdminLayout = ({ children }) => {\n  const { dispatch } = useContext(AuthContext);\n  const [collapsed, setCollapsed] = useState(false);\n\n  const toggle = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <Wrapper>\n      <Layout>\n        <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\n          <div className=\"logo\">SALE COURSES</div>\n\n          <MenuItem />\n        </Sider>\n\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\">\n            <div className=\"user-info\">\n              <Dropdown\n                overlay={\n                  <Menu>\n                    <Menu.Item key=\"user-profile\" icon={<SelectOutlined />}>\n                      User profile\n                    </Menu.Item>\n                    <Menu.Item\n                      key=\"logout\"\n                      icon={<LogoutOutlined />}\n                      onClick={() => dispatch({ type: \"logout\" })}\n                    >\n                      Logout\n                    </Menu.Item>\n                  </Menu>\n                }\n              >\n                <Avatar size=\"large\" icon={<UserOutlined />} />\n              </Dropdown>\n            </div>\n          </Header>\n\n          {/* <Breadcrumb data={breadcrumb} /> */}\n\n          <Content className=\"site-layout-background\">{children}</Content>\n        </Layout>\n      </Layout>\n    </Wrapper>\n  );\n};\n\nexport default AdminLayout;\n","import { Switch } from \"react-router-dom\";\n\nimport AuthenticatedRoute from \"routes/AuthenticatedRoute\";\n\nimport { ListCourse, NewCourse, EditCourse } from \"domain/admin/Courses\";\nimport { ListLesson, NewLesson, EditLesson } from \"domain/admin/Lessons\";\nimport { ListRequest } from \"domain/admin/Requests\";\nimport { ListUser, NewUser, EditUser } from \"domain/admin/Users\";\nimport {\n  ListCategory,\n  NewCategory,\n  EditCategory,\n} from \"domain/admin/Categories\";\nimport { ListExam, NewExam, EditExam } from \"domain/admin/Exams\";\nimport {\n  ListQuestion,\n  NewQuestion,\n  EditQuestion,\n} from \"domain/admin/Questions\";\nimport AdminHomePage from \"domain/admin/HomePage\";\nimport AdminLayout from \"layouts/AdminLayout\";\n\nfunction App() {\n  return (\n    <Switch>\n      <AdminLayout>\n        <AuthenticatedRoute exact path=\"/admin\" component={AdminHomePage} />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/requests\"\n          component={ListRequest}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories\"\n          component={ListCategory}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories/new\"\n          component={NewCategory}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories/:categoryId/edit\"\n          component={EditCategory}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/lessons\"\n          component={ListLesson}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/lessons/new\"\n          component={NewLesson}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/lessons/:lessonId/edit\"\n          component={EditLesson}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses\"\n          component={ListCourse}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses/new\"\n          component={NewCourse}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses/:categoryId/edit\"\n          component={EditCourse}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/questions\"\n          component={ListQuestion}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/questions/new\"\n          component={NewQuestion}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/questions/:questionId/edit\"\n          component={EditQuestion}\n        />\n\n        <AuthenticatedRoute exact path=\"/admin/exams\" component={ListExam} />\n        <AuthenticatedRoute exact path=\"/admin/exams/new\" component={NewExam} />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/exams/:examId/edit\"\n          component={EditExam}\n        />\n\n        <AuthenticatedRoute exact path=\"/admin/users\" component={ListUser} />\n        <AuthenticatedRoute exact path=\"/admin/users/new\" component={NewUser} />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/users/:userId/edit\"\n          component={EditUser}\n        />\n      </AdminLayout>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst PublicRoute = ({ component: Component, ...restProps }) => {\n  const { isAuth } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) =>\n        !isAuth ? <Component {...props} /> : <Redirect to={{ pathname: \"/\" }} />\n      }\n    />\n  );\n};\n\nexport default PublicRoute;\n","const HomePage = () => {\n  return <h1>User home page</h1>;\n};\n\nexport default HomePage;\n","import { Switch } from \"react-router-dom\";\n\nimport AuthenticatedRoute from \"routes/AuthenticatedRoute\";\n\nimport UserHomePage from \"domain/user/HomePage\";\n\nfunction App() {\n  return (\n    <Switch>\n      <AuthenticatedRoute exact path=\"/\" component={UserHomePage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { AuthProvider } from \"contexts/auth\";\n\nimport SignInPage from \"containers/SignIn\";\n\nimport AdminRoutes from \"routes/AdminRoutes\";\nimport PublicRoute from \"routes/PublicRoute\";\nimport UserRoutes from \"routes/UserRoutes\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          <PublicRoute exact path=\"/sign_in\" component={SignInPage} />\n\n          <Route exact path=\"/\">\n            <UserRoutes />\n          </Route>\n\n          <Route path=\"/admin\">\n            <AdminRoutes />\n          </Route>\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}