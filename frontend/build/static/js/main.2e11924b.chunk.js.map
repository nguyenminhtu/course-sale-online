{"version":3,"sources":["contexts/auth/index.js","components/PageHeader/PageHeader.js","hooks/useRequest.js","containers/SignIn/SignIn.styles.js","containers/SignIn/SignIn.js","containers/SignUp/SignUp.styles.js","containers/SignUp/SignUp.js","routes/AuthenticatedRoute/AuthenticatedRoute.js","components/EditButton/EditButton.js","components/DeleteButton/DeleteButton.js","components/NewButton/NewButton.js","components/HeaderArea/HeaderArea.styles.js","components/HeaderArea/HeaderArea.js","domain/admin/Courses/ListPage.styles.js","domain/admin/Courses/ListPage.js","domain/admin/Courses/NewPage.styles.js","domain/admin/Courses/NewPage.js","domain/admin/Courses/EditPage.js","domain/admin/Exams/ListPage.styles.js","domain/admin/Exams/ListPage.js","domain/admin/Exams/NewPage.styles.js","domain/admin/Exams/NewPage.js","domain/admin/Exams/EditPage.js","domain/admin/Lessons/ListPage.styles.js","domain/admin/Lessons/ListPage.js","domain/admin/Lessons/NewPage.styles.js","domain/admin/Lessons/NewPage.js","domain/admin/Lessons/EditPage.js","domain/admin/Requests/ListPage.styles.js","domain/admin/Requests/ListPage.js","domain/admin/Users/ListPage.styles.js","domain/admin/Users/ListPage.js","domain/admin/Users/NewPage.styles.js","domain/admin/Users/NewPage.js","domain/admin/Users/EditPage.js","domain/admin/Categories/ListPage.styles.js","domain/admin/Categories/ListPage.js","domain/admin/Categories/NewPage.styles.js","domain/admin/Categories/NewPage.js","domain/admin/Categories/EditPage.js","domain/admin/Questions/ListPage.styles.js","domain/admin/Questions/ListPage.js","domain/admin/Questions/NewPage.styles.js","domain/admin/Questions/NewPage.js","domain/admin/Questions/EditPage.js","domain/admin/Reviews/ListPage.styles.js","domain/admin/Reviews/ListPage.js","domain/admin/HomePage/HomePage.styles.js","domain/admin/HomePage/HomePage.js","layouts/AdminLayout/MenuItem.js","layouts/AdminLayout/AdminLayout.styles.js","layouts/AdminLayout/AdminLayout.js","routes/AdminRoutes/AdminRoutes.js","routes/PublicRoute/PublicRoute.js","layouts/UserLayout/UserLayout.styles.js","layouts/UserLayout/UserLayout.js","domain/user/HomePage/HomePage.styles.js","domain/user/HomePage/HomePage.js","routes/UserRoutes/UserRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["initialStates","isAuth","localStorage","getItem","sessionStorage","accessToken","user","JSON","parse","AuthContext","createContext","AuthProvider","children","useReducer","state","action","type","payload","clear","dispatch","Provider","value","PageHeaderComponent","props","history","useHistory","onBack","goBack","useRequest","optionParams","useContext","useFetch","process","cachePolicy","interceptors","request","options","headers","Authorization","response","status","get","post","patch","delete","del","loading","error","data","styled","div","SignIn","Form","useForm","form","onFinish","useCallback","values","a","username","password","strategy","code","setFieldsValue","errorMessage","message","storage","remember","successMessage","setItem","stringify","setTimeout","spinning","useMemo","PageHeader","className","title","name","layout","initialValues","onChange","Item","noStyle","shouldUpdate","prevValues","curValues","getFieldValue","showIcon","label","rules","required","autoFocus","Password","valuePropName","to","htmlType","SignUp","responseCreateUser","responseLogin","Group","placeholder","style","width","format","AuthenticatedRoute","Component","component","restProps","render","pathname","EditButton","icon","EditOutlined","backgroundColor","color","borderColor","DeleteButton","danger","MinusCircleOutlined","NewButton","path","PlusCircleOutlined","Search","Input","HeaderArea","selectedIds","onDelete","onSearch","newPath","searchPlaceHolder","customButtonArea","disabled","length","onClick","enterButton","allowClear","columns","dataIndex","key","ListPage","total","useState","page","setPage","query","setQuery","setSelectedIds","useEffect","pageQuery","searchQuery","handleDeleteCourse","notification","success","placement","text","rowSelection","selectedRowKeys","dataSource","map","item","category","description","_id","push","pagination","pageSize","current","Option","Select","TextArea","NewPage","replace","span","offset","tooltip","InfoCircleOutlined","rows","EditPage","categoryId","useParams","categories","setCategories","categoriesResponse","getResponse","price","getCourseInfo","_","record","course","isFinish","handleDeleteExam","courses","setCourses","questionOptions","setQuestionOptions","questionList","setQuestionList","searchValue","newOptions","filter","question","toLowerCase","indexOf","id","onSelectQuestion","option","newQuestionList","onRemoveQuestion","questionId","questions","courseResponse","getData","onSelect","bordered","renderItem","actions","questionData","setQuestionData","examId","questionResponse","onClear","handleDeleteLesson","formData","FormData","append","video","file","beforeUpload","accept","multiple","UploadOutlined","lessonId","coursesResponse","controls","height","src","handleProcessRequest","handleDeleteRequest","CheckOutlined","border","CloseOutlined","note","role","gender","handleDeleteUser","dob","defaultValue","userId","phone","moment","getUserInfo","handleDeleteCategory","getCategoryInfo","handleDeleteQuestion","List","fields","add","remove","field","align","area","answers","fieldKey","block","PlusOutlined","handleSetAnswer","newAnswerList","answer","index","isTrue","allowHalf","rate","content","handleDeleteReview","HomePage","gutter","totalRequest","valueStyle","totalCourse","totalUser","totalCategory","totalReview","MenuItem","theme","mode","defaultSelectedKeys","BarsOutlined","AlertOutlined","BookOutlined","UserOutlined","VideoCameraOutlined","FileOutlined","QuestionCircleOutlined","FormOutlined","Header","Layout","Content","Sider","AdminLayout","collapsed","setCollapsed","collapsible","onCollapse","overlay","SelectOutlined","LogoutOutlined","size","App","exact","AdminHomePage","ListRequest","ListCategory","NewCategory","EditCategory","ListLesson","NewLesson","EditLesson","ListCourse","NewCourse","EditCourse","ListQuestion","NewQuestion","EditQuestion","ListExam","NewExam","EditExam","ListReview","ListUser","NewUser","EditUser","PublicRoute","Footer","UserLayout","userAuthArea","LoginOutlined","UserAddOutlined","position","zIndex","console","log","padding","marginTop","minHeight","textAlign","hoverable","UserHomePage","SignInPage","SignUpPage","UserRoutes","AdminRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2e11924b.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\n\nconst initialStates = {\n  isAuth:\n    localStorage.getItem(\"isAuth\") || sessionStorage.getItem(\"isAuth\") || false,\n  accessToken:\n    localStorage.getItem(\"accessToken\") ||\n    sessionStorage.getItem(\"accessToken\") ||\n    null,\n  user: localStorage.getItem(\"user\")\n    ? JSON.parse(localStorage.getItem(\"user\"))\n    : sessionStorage.getItem(\"user\")\n    ? JSON.parse(sessionStorage.getItem(\"user\"))\n    : null,\n};\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"login\":\n        return {\n          isAuth: true,\n          accessToken: action.payload.accessToken,\n          user: action.payload.user,\n        };\n\n      case \"logout\":\n        localStorage.clear();\n        sessionStorage.clear();\n        return { isAuth: false, accessToken: null, user: {} };\n\n      default: {\n        return { ...initialStates };\n      }\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialStates);\n\n  return (\n    <AuthContext.Provider value={{ ...state, dispatch }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","import { PageHeader } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\n\nconst PageHeaderComponent = (props) => {\n  const history = useHistory();\n\n  return <PageHeader onBack={() => history.goBack()} {...props} />;\n};\n\nexport default PageHeaderComponent;\n","import { useContext } from \"react\";\nimport useFetch from \"use-http\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst useRequest = ({ optionParams = {} }) => {\n  const { accessToken, dispatch } = useContext(AuthContext);\n\n  const { get, post, patch, del, loading, error, data } = useFetch(\n    process.env.REACT_APP_API_URL,\n    {\n      ...optionParams,\n      cachePolicy: \"no-cache\",\n      interceptors: {\n        request: ({ options }) => ({\n          ...options,\n          headers: {\n            ...options.headers,\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }),\n        response: ({ response }) => {\n          if (!!accessToken && response.status === 401) {\n            dispatch({ type: \"logout\" });\n            return;\n          }\n          return response;\n        },\n      },\n    }\n  );\n\n  return { get, post, patch, delete: del, loading, error, response: data };\n};\n\nexport default useRequest;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #777;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .ant-page-header {\n    padding-top: 0;\n  }\n\n  & > div {\n    width: 400px;\n    background-color: #fff;\n    padding: 24px;\n    border-radius: 8px;\n\n    .sign-in-title {\n      .ant-page-header-heading {\n        justify-content: center;\n      }\n    }\n\n    .ant-alert {\n      margin-bottom: 16px;\n    }\n\n    .ant-form-item:last-child {\n      margin-bottom: 0 !important;\n      text-align: center;\n    }\n  }\n\n  .button-area {\n    .ant-form-item-control-input-content {\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n    }\n  }\n`;\n","import { Form, Input, Button, Checkbox, Spin, Alert } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useCallback, useMemo, useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./SignIn.styles\";\n\nconst SignIn = () => {\n  const { dispatch } = useContext(AuthContext);\n  const { post, loading } = useRequest({});\n\n  const [form] = Form.useForm();\n\n  const onFinish = useCallback(\n    async (values) => {\n      const response = await post(\"/authentication\", {\n        username: values.username,\n        password: values.password,\n        strategy: \"local\",\n      });\n\n      if (response.code) {\n        form.setFieldsValue({ errorMessage: response.message });\n        return;\n      }\n\n      const storage = values.remember ? localStorage : sessionStorage;\n\n      const { accessToken, user } = response;\n\n      form.setFieldsValue({ successMessage: \"Login successfully\" });\n      storage.setItem(\"accessToken\", accessToken);\n      storage.setItem(\"user\", JSON.stringify(user));\n      storage.setItem(\"isAuth\", true);\n\n      setTimeout(() => {\n        dispatch({\n          type: \"login\",\n          payload: { user, accessToken },\n        });\n      }, 300);\n    },\n    [dispatch, form, post]\n  );\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        <div>\n          {useMemo(\n            () => (\n              <PageHeaderComponent\n                className=\"sign-in-title\"\n                title=\"SIGN IN\"\n                onBack={null}\n              />\n            ),\n            []\n          )}\n\n          {useMemo(\n            () => (\n              <Form\n                form={form}\n                name=\"basic\"\n                layout=\"vertical\"\n                initialValues={{ errorMessage: null }}\n                onFinish={onFinish}\n                onChange={() => form.setFieldsValue({ errorMessage: null })}\n              >\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.errorMessage !== curValues.errorMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"errorMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"errorMessage\")}\n                        type=\"error\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.successMessage !== curValues.successMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"successMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"successMessage\")}\n                        type=\"success\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  label=\"User name\"\n                  name=\"username\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your username!\",\n                    },\n                  ]}\n                >\n                  <Input autoFocus />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Password\"\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your password!\" },\n                  ]}\n                >\n                  <Input.Password />\n                </Form.Item>\n\n                <Form.Item name=\"remember\" valuePropName=\"checked\">\n                  <Checkbox>Remember me</Checkbox>\n                </Form.Item>\n\n                <Form.Item className=\"button-area\">\n                  <Link to=\"/sign_up\">\n                    <Button type=\"link\" htmlType=\"button\">\n                      Go to sign up\n                    </Button>\n                  </Link>\n\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Sign me in\n                  </Button>\n                </Form.Item>\n              </Form>\n            ),\n            [form, onFinish]\n          )}\n        </div>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default SignIn;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #777;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .ant-page-header {\n    padding-top: 0;\n  }\n\n  & > div {\n    width: 400px;\n    background-color: #fff;\n    padding: 24px;\n    border-radius: 8px;\n\n    .sign-in-title {\n      .ant-page-header-heading {\n        justify-content: center;\n      }\n    }\n\n    .ant-alert {\n      margin-bottom: 16px;\n    }\n\n    .ant-form-item:last-child {\n      margin-bottom: 0 !important;\n      text-align: center;\n    }\n  }\n\n  .button-area {\n    .ant-form-item-control-input-content {\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n    }\n  }\n`;\n","import { Form, Input, Button, DatePicker, Spin, Alert, Radio } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useCallback, useMemo, useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./SignUp.styles\";\n\nconst SignUp = () => {\n  const { dispatch } = useContext(AuthContext);\n  const { post, loading } = useRequest({});\n\n  const [form] = Form.useForm();\n\n  const onFinish = useCallback(\n    async (values) => {\n      const responseCreateUser = await post(\"/users\", values);\n\n      if (responseCreateUser.code) {\n        form.setFieldsValue({ errorMessage: responseCreateUser.message });\n        return;\n      }\n\n      const responseLogin = await post(\"/authentication\", {\n        username: values.username,\n        password: values.password,\n        strategy: \"local\",\n      });\n\n      if (responseLogin.code) {\n        form.setFieldsValue({ errorMessage: responseLogin.message });\n        return;\n      }\n\n      const { accessToken, user } = responseLogin;\n\n      form.setFieldsValue({ successMessage: \"Login successfully\" });\n      sessionStorage.setItem(\"accessToken\", accessToken);\n      sessionStorage.setItem(\"user\", JSON.stringify(user));\n      sessionStorage.setItem(\"isAuth\", true);\n\n      setTimeout(() => {\n        dispatch({\n          type: \"login\",\n          payload: { user, accessToken },\n        });\n      }, 300);\n    },\n    [dispatch, form, post]\n  );\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        <div>\n          {useMemo(\n            () => (\n              <PageHeaderComponent\n                className=\"sign-in-title\"\n                title=\"SIGN UP\"\n                onBack={null}\n              />\n            ),\n            []\n          )}\n\n          {useMemo(\n            () => (\n              <Form\n                form={form}\n                name=\"basic\"\n                layout=\"vertical\"\n                initialValues={{ errorMessage: null }}\n                onFinish={onFinish}\n                onChange={() => form.setFieldsValue({ errorMessage: null })}\n              >\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.errorMessage !== curValues.errorMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"errorMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"errorMessage\")}\n                        type=\"error\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.successMessage !== curValues.successMessage\n                  }\n                >\n                  {({ getFieldValue }) => {\n                    return !!getFieldValue(\"successMessage\") ? (\n                      <Alert\n                        message={getFieldValue(\"successMessage\")}\n                        type=\"success\"\n                        showIcon\n                      />\n                    ) : null;\n                  }}\n                </Form.Item>\n\n                <Form.Item\n                  label=\"User name\"\n                  name=\"username\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your username!\",\n                    },\n                  ]}\n                >\n                  <Input autoFocus />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Password\"\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your password!\" },\n                  ]}\n                >\n                  <Input.Password />\n                </Form.Item>\n\n                <Form.Item label=\"Gender\" name=\"gender\">\n                  <Radio.Group>\n                    <Radio value={0}>Male</Radio>\n                    <Radio value={1}>Female</Radio>\n                    <Radio value={2}>Other</Radio>\n                  </Radio.Group>\n                </Form.Item>\n\n                <Form.Item label=\"Birthday\" name=\"dob\">\n                  <DatePicker\n                    placeholder=\"\"\n                    style={{ width: \"100%\" }}\n                    format=\"DD/MM/YYYY\"\n                  />\n                </Form.Item>\n\n                <Form.Item label=\"Phone\" name=\"phone\">\n                  <Input />\n                </Form.Item>\n\n                <Form.Item className=\"button-area\">\n                  <Link to=\"/sign_in\">\n                    <Button type=\"link\" htmlType=\"button\">\n                      Go to sign in\n                    </Button>\n                  </Link>\n\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Sign me up\n                  </Button>\n                </Form.Item>\n              </Form>\n            ),\n            [form, onFinish]\n          )}\n        </div>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default SignUp;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst AuthenticatedRoute = ({ component: Component, ...restProps }) => {\n  const { isAuth } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) =>\n        isAuth ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/sign_in\" }} />\n        )\n      }\n    />\n  );\n};\n\nexport default AuthenticatedRoute;\n","import { EditOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\nconst EditButton = (props) => {\n  return (\n    <Button\n      icon={<EditOutlined />}\n      type=\"ghost\"\n      style={{\n        backgroundColor: \"#fff3cd\",\n        color: \"#856404\",\n        borderColor: \"#ffeeba\",\n      }}\n      {...props}\n    >\n      Edit\n    </Button>\n  );\n};\n\nexport default EditButton;\n","import { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\n\nconst DeleteButton = (props) => {\n  return (\n    <Button type=\"primary\" danger icon={<MinusCircleOutlined />} {...props}>\n      Delete\n    </Button>\n  );\n};\n\nexport default DeleteButton;\n","import { Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\n\nconst NewButton = ({ path }) => {\n  return (\n    <Link to={path}>\n      <Button type=\"primary\" icon={<PlusCircleOutlined />}>\n        New\n      </Button>\n    </Link>\n  );\n};\n\nexport default NewButton;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 16px 16px;\n\n  .search-area {\n    width: 35%;\n  }\n\n  .button-area {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n\n    button {\n      margin-left: 8px;\n    }\n  }\n`;\n","import { Input } from \"antd\";\nimport { useMemo } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport NewButton from \"components/NewButton\";\nimport Wrapper from \"./HeaderArea.styles\";\n\nconst { Search } = Input;\n\nconst HeaderArea = ({\n  selectedIds,\n  onDelete,\n  onSearch,\n  newPath,\n  searchPlaceHolder,\n  customButtonArea,\n}) => {\n  return (\n    <Wrapper>\n      {!!customButtonArea && customButtonArea}\n\n      {!customButtonArea && (\n        <div className=\"button-area\">\n          <NewButton path={newPath} />\n\n          <DeleteButton disabled={!selectedIds.length} onClick={onDelete} />\n        </div>\n      )}\n\n      <div className=\"search-area\">\n        {useMemo(\n          () => (\n            <Search\n              onSearch={onSearch}\n              placeholder={searchPlaceHolder}\n              enterButton=\"Search\"\n              allowClear\n            />\n          ),\n          [onSearch, searchPlaceHolder]\n        )}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default HeaderArea;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n\n  .description-column {\n    max-width: 460px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-bottom: 0;\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport EditButton from \"components/EditButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Category\",\n    dataIndex: \"category\",\n    key: \"category\",\n  },\n  {\n    title: \"Price\",\n    dataIndex: \"price\",\n    key: \"price\",\n  },\n  {\n    title: \"Description\",\n    dataIndex: \"description\",\n    key: \"description\",\n    width: \"40%\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/courses?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteCourse = useCallback(async () => {\n    await post(\"/remove_courses\", { selectedIds });\n    notification.success({\n      message: \"Delete course successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List course\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            newPath=\"/admin/courses/new\"\n            searchPlaceHolder=\"Search course by name\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteCourse}\n            onSearch={(text) => setQuery(text)}\n          />\n        ),\n        [handleDeleteCourse, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    category: item.category.name,\n                    description: (\n                      <p className=\"description-column\">{item.description}</p>\n                    ),\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/courses/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const responseCourse = await post(\"/courses\", data);\n      if (responseCourse._id) {\n        notification.success({\n          message: \"Create course successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/courses\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/categories\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New course\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    name=\"category\"\n                    label=\"Category\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a category\" allowClear>\n                      {response.data &&\n                        response.data.map((category) => (\n                          <Option key={category._id} value={category._id}>\n                            {category.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Price\"\n                    name=\"price\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <TextArea rows={6} />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst EditPage = () => {\n  const { categoryId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n\n  const [categories, setCategories] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/courses/${categoryId}`, data);\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update course successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/courses\");\n      }\n    },\n    [categoryId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const categoriesResponse = await get(\"/categories\");\n      setCategories(categoriesResponse.data);\n\n      if (categoryId) {\n        const getResponse = await get(`/courses/${categoryId}`);\n        form.setFieldsValue({\n          name: getResponse.name,\n          category: getResponse.category,\n          description: getResponse.description,\n          price: getResponse.price,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [categoryId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit course\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Course not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        name=\"category\"\n                        label=\"Category\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a category\" allowClear>\n                          {categories.map((category) => (\n                            <Option key={category._id} value={category._id}>\n                              {category.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Price\"\n                        name=\"price\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Description\"\n                        name=\"description\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <TextArea rows={6} />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [categories, form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Is finish\",\n    dataIndex: \"isFinish\",\n    key: \"isFinish\",\n    render: (_, record) => {\n      return record.isFinish ? \"Finshed\" : \"Not yet\";\n    },\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/exams?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteExam = useCallback(async () => {\n    await post(\"/remove_exams\", { selectedIds });\n    notification.success({\n      message: \"Delete exam successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List exam\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search exam by name\"\n            newPath=\"/admin/exams/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteExam}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteExam, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/exams/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n\n    .ant-space {\n      display: flex;\n    }\n\n    .ant-space-align-baseline {\n      align-items: center;\n    }\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  AutoComplete,\n  List,\n} from \"antd\";\nimport { InfoCircleOutlined, MinusCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const [courses, setCourses] = useState([]);\n  const [questionOptions, setQuestionOptions] = useState([]);\n  const [questionList, setQuestionList] = useState([]);\n\n  const history = useHistory();\n  const { get, post, loading, response = { data: [] } } = useRequest({});\n\n  const onSearch = useCallback(\n    (searchValue) => {\n      if (!searchValue) {\n        setQuestionOptions([]);\n        return;\n      }\n\n      const newOptions = response.data\n        .filter(\n          (question) =>\n            question.title.toLowerCase().indexOf(searchValue.toLowerCase()) > -1\n        )\n        .map((question) => ({ value: question.title, id: question._id }));\n      setQuestionOptions(newOptions);\n    },\n    [response.data]\n  );\n\n  const onSelectQuestion = useCallback(\n    (_, option) => {\n      const newQuestionList = [\n        ...questionList.filter((question) => question.id !== option.id),\n        option,\n      ];\n      setQuestionList(newQuestionList);\n    },\n    [questionList]\n  );\n\n  const onRemoveQuestion = useCallback(\n    (questionId) => {\n      const newQuestionList = [\n        ...questionList.filter((question) => question.id !== questionId),\n      ];\n      setQuestionList(newQuestionList);\n    },\n    [questionList]\n  );\n\n  const onFinish = useCallback(\n    async (data) => {\n      const postResponse = await post(\"/exams\", {\n        ...data,\n        questions: questionList.map((question) => question.id),\n      });\n\n      if (postResponse._id) {\n        notification.success({\n          message: \"Create exam successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/exams\");\n      }\n    },\n    [history, post, questionList]\n  );\n\n  useEffect(() => {\n    const getData = async () => {\n      const courseResponse = await get(\"/courses\");\n      setCourses(courseResponse.data);\n\n      get(\"/questions?limit=1000&skip=0\");\n    };\n\n    getData();\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New exam\" />\n          ),\n          []\n        )}\n\n        <Row>\n          <Col span={10} offset={7}>\n            <Form layout=\"vertical\" onFinish={onFinish}>\n              {useMemo(\n                () => (\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n                ),\n                []\n              )}\n\n              {useMemo(\n                () => (\n                  <Form.Item\n                    label=\"Course\"\n                    name=\"course\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a course\" allowClear>\n                      {courses.map((course) => (\n                        <Option key={course._id} value={course._id}>\n                          {course.name}\n                        </Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                ),\n                [courses]\n              )}\n\n              {useMemo(\n                () => (\n                  <Form.Item label=\"Questions\">\n                    <AutoComplete\n                      options={questionOptions}\n                      style={{\n                        width: \"100%\",\n                      }}\n                      onSelect={onSelectQuestion}\n                      onSearch={onSearch}\n                      placeholder=\"Autocomplete search question to add\"\n                      allowClear\n                    />\n\n                    <List\n                      bordered\n                      dataSource={questionList}\n                      renderItem={(item) => (\n                        <List.Item\n                          actions={[\n                            <MinusCircleOutlined\n                              style={{ color: \"#856404\" }}\n                              onClick={() => onRemoveQuestion(item.id)}\n                            />,\n                          ]}\n                        >\n                          {item.value}\n                        </List.Item>\n                      )}\n                    />\n                  </Form.Item>\n                ),\n                [\n                  onRemoveQuestion,\n                  onSearch,\n                  onSelectQuestion,\n                  questionList,\n                  questionOptions,\n                ]\n              )}\n\n              {useMemo(\n                () => (\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                ),\n                []\n              )}\n            </Form>\n          </Col>\n        </Row>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  AutoComplete,\n  List,\n} from \"antd\";\nimport { InfoCircleOutlined, MinusCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const [courses, setCourses] = useState([]);\n  const [questionData, setQuestionData] = useState([]);\n  const [questionOptions, setQuestionOptions] = useState([]);\n  const [questionList, setQuestionList] = useState([]);\n\n  const { get, patch, loading, response = {} } = useRequest({});\n  const { examId } = useParams();\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const onSearch = useCallback(\n    (searchValue) => {\n      if (!searchValue) {\n        return;\n      }\n\n      const newOptions = questionData\n        .filter(\n          (question) =>\n            question.title.toLowerCase().indexOf(searchValue.toLowerCase()) > -1\n        )\n        .map((question) => ({ value: question.title, id: question._id }));\n      setQuestionOptions(newOptions);\n    },\n    [questionData]\n  );\n\n  const onSelectQuestion = useCallback(\n    (_, option) => {\n      const newQuestionList = [\n        ...questionList.filter((question) => question.id !== option.id),\n        option,\n      ];\n      setQuestionList(newQuestionList);\n    },\n    [questionList]\n  );\n\n  const onRemoveQuestion = useCallback(\n    (questionId) => {\n      const newQuestionList = [\n        ...questionList.filter((question) => question.id !== questionId),\n      ];\n      setQuestionList(newQuestionList);\n    },\n    [questionList]\n  );\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/exams/${examId}`, {\n        ...data,\n        questions: questionList.map((question) => question.id),\n      });\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update exam successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/exams\");\n      }\n    },\n    [examId, history, patch, questionList]\n  );\n\n  useEffect(() => {\n    const getData = async () => {\n      const courseResponse = await get(\"/courses\");\n      setCourses(courseResponse.data);\n\n      const questionResponse = await get(\"/questions?limit=1000&skip=0\");\n      setQuestionData(questionResponse.data);\n\n      if (!examId) {\n        return;\n      }\n\n      const getResponse = await get(`/exams/${examId}`);\n\n      if (!getResponse._id) {\n        return;\n      }\n\n      form.setFieldsValue({\n        name: getResponse.name,\n        course: getResponse.course,\n      });\n\n      setQuestionList(\n        getResponse.questions.map((question) => ({\n          value: question.title,\n          id: question._id,\n        }))\n      );\n    };\n\n    getData();\n  }, [examId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"Edit exam\" />\n          ),\n          []\n        )}\n\n        <Row>\n          <Col span={10} offset={7}>\n            <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n              {response.code && <p>Exam not found</p>}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [response._id]\n              )}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item\n                        label=\"Course\"\n                        name=\"course\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a course\" allowClear>\n                          {courses.map((course) => (\n                            <Option key={course._id} value={course._id}>\n                              {course.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [courses, response._id]\n              )}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item label=\"Questions\">\n                        <AutoComplete\n                          options={questionOptions}\n                          style={{\n                            width: \"100%\",\n                          }}\n                          onSelect={onSelectQuestion}\n                          onSearch={onSearch}\n                          placeholder=\"Autocomplete search question to add\"\n                          onClear={() => setQuestionOptions([])}\n                          allowClear\n                        />\n\n                        <List\n                          bordered\n                          dataSource={questionList}\n                          renderItem={(item) => (\n                            <List.Item\n                              actions={[\n                                <MinusCircleOutlined\n                                  style={{ color: \"#856404\" }}\n                                  onClick={() => onRemoveQuestion(item.id)}\n                                />,\n                              ]}\n                            >\n                              {item.value}\n                            </List.Item>\n                          )}\n                        />\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [\n                  onRemoveQuestion,\n                  onSearch,\n                  onSelectQuestion,\n                  questionList,\n                  questionOptions,\n                  response._id,\n                ]\n              )}\n\n              {useMemo(\n                () => (\n                  <>\n                    {response._id && (\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    )}\n                  </>\n                ),\n                [response._id]\n              )}\n            </Form>\n          </Col>\n        </Row>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Is Finish\",\n    dataIndex: \"isFinish\",\n    key: \"isFinish\",\n    render: (_, record) => {\n      return record.isFinish ? \"Finished\" : \"Not yet\";\n    },\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/lessons?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteLesson = useCallback(async () => {\n    await post(\"/remove_lessons\", { selectedIds });\n    notification.success({\n      message: \"Delete lesson successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List lesson\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search lesson by name\"\n            newPath=\"/admin/lessons/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteLesson}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteLesson, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/lessons/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n\n    .upload-wrapper {\n      .ant-upload,\n      button {\n        width: 100%;\n      }\n    }\n\n    video {\n      object-fit: fill;\n      margin-bottom: 24px;\n    }\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Upload,\n} from \"antd\";\nimport { InfoCircleOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = new FormData();\n      formData.append(\"name\", data.name);\n      formData.append(\"course\", data.course);\n      formData.append(\"video\", data.video.file);\n      const postResponse = await post(\"/lessons\", formData);\n\n      if (postResponse._id) {\n        notification.success({\n          message: \"Create lesson successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/lessons\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/courses\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New lesson\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Lesson name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"course\"\n                    label=\"Course\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a course\" allowClear>\n                      {response.data &&\n                        response.data.map((course) => (\n                          <Option key={course._id} value={course._id}>\n                            {course.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Video\"\n                    name=\"video\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                    valuePropName=\"video\"\n                  >\n                    <Upload\n                      className=\"upload-wrapper\"\n                      beforeUpload={() => false}\n                      accept=\"video/mp4\"\n                      multiple={false}\n                    >\n                      <Button icon={<UploadOutlined />}>Upload video</Button>\n                    </Upload>\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Upload,\n  Radio,\n} from \"antd\";\nimport { InfoCircleOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const { lessonId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const [courses, setCourses] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      let formData = {\n        name: data.name,\n        course: data.course,\n        isFinish: data.isFinish,\n      };\n\n      if (typeof data.video !== \"string\") {\n        formData = new FormData();\n        formData.append(\"name\", data.name);\n        formData.append(\"course\", data.course);\n        formData.append(\"video\", data.video.file);\n        formData.append(\"oldVideo\", response.video);\n        formData.append(\"isFinish\", data.isFinish);\n      }\n\n      const patchResponse = await patch(`/lessons/${lessonId}`, formData);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update lesson successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/lessons\");\n      }\n    },\n    [history, lessonId, patch, response.video]\n  );\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const coursesResponse = await get(\"/courses\");\n      setCourses(coursesResponse.data);\n\n      if (lessonId) {\n        const getResponse = await get(`/lessons/${lessonId}`);\n        form.setFieldsValue({\n          name: getResponse.name,\n          course: getResponse.course,\n          video: getResponse.video,\n          isFinish: getResponse.isFinish,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [lessonId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"Edit lesson\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Lesson not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Lesson name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item\n                        name=\"course\"\n                        label=\"Course\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a course\" allowClear>\n                          {courses.map((course) => (\n                            <Option key={course._id} value={course._id}>\n                              {course.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item\n                        label=\"Video\"\n                        name=\"video\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                        valuePropName=\"video\"\n                      >\n                        <Upload\n                          className=\"upload-wrapper\"\n                          beforeUpload={() => false}\n                          accept=\"video/mp4\"\n                        >\n                          <Button icon={<UploadOutlined />}>\n                            Upload video\n                          </Button>\n                        </Upload>\n                      </Form.Item>\n\n                      {response.video && (\n                        <Form.Item noStyle shouldUpdate={false}>\n                          <video controls width=\"100%\" height=\"300\">\n                            <source\n                              src={`${process.env.REACT_APP_API_URL}${response.video}`}\n                              type=\"video/mp4\"\n                            />\n                            Your browser does not support the video tag.\n                          </video>\n                        </Form.Item>\n                      )}\n\n                      <Form.Item\n                        name=\"isFinish\"\n                        label=\"Is lesson finish\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Radio.Group>\n                          <Radio value={true}>Yes</Radio>\n                          <Radio value={false}>Not Yet</Radio>\n                        </Radio.Group>\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [courses, form, onFinish, response._id, response.code, response.video]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n\n  .note-column {\n    max-width: 460px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-bottom: 0;\n  }\n`;\n","import { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { Table, Button, Tag, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User\",\n    dataIndex: \"user\",\n    key: \"user\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n  },\n  {\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n  },\n  {\n    title: \"Note\",\n    dataIndex: \"note\",\n    key: \"note\",\n    width: \"40%\",\n  },\n];\n\nconst ListPage = () => {\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    get(`/requests?${pageQuery}`);\n  }, [get, page]);\n\n  const handleProcessRequest = useCallback(\n    async (type) => {\n      await post(\"/process_requests\", { selectedIds, type });\n      notification.success({\n        message: `${\n          type === \"approve\" ? \"Approve\" : \"Reject\"\n        } request successfully`,\n        placement: \"topRight\",\n      });\n      setSelectedIds([]);\n      setPage(1);\n    },\n    [post, selectedIds]\n  );\n\n  const handleDeleteRequest = useCallback(async () => {\n    await post(\"/remove_requests\", { selectedIds });\n    notification.success({\n      message: \"Delete request successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List request\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            selectedIds={selectedIds}\n            onDelete={null}\n            searchPlaceHolder=\"Search request by user name or course name\"\n            customButtonArea={\n              <div className=\"button-area\">\n                <Button\n                  icon={<CheckOutlined style={{ color: \"#52c41a\" }} />}\n                  disabled={!selectedIds.length}\n                  type=\"ghost\"\n                  style={{\n                    backgroundColor: \"#f6ffed\",\n                    border: \"1px solid #b7eb8f\",\n                  }}\n                  onClick={() => handleProcessRequest(\"approve\")}\n                >\n                  Approve\n                </Button>\n\n                <Button\n                  icon={<CloseOutlined style={{ color: \"#ff4d4f\" }} />}\n                  disabled={!selectedIds.length}\n                  onClick={() => handleProcessRequest(\"reject\")}\n                  type=\"ghost\"\n                  style={{\n                    backgroundColor: \"#fff2f0\",\n                    border: \"1px solid #ffccc7\",\n                  }}\n                >\n                  Reject\n                </Button>\n\n                <DeleteButton\n                  disabled={!selectedIds.length}\n                  onClick={handleDeleteRequest}\n                />\n              </div>\n            }\n          />\n        ),\n        [handleDeleteRequest, handleProcessRequest, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    user: item.user && item.user.username,\n                    course: item.course && item.course.name,\n                    note: <p className=\"note-column\">{item.note}</p>,\n                    status:\n                      item.status === \"waiting\" ? (\n                        <Tag color=\"gold\">{item.status}</Tag>\n                      ) : item.status === \"approved\" ? (\n                        <Tag color=\"green\">{item.status}</Tag>\n                      ) : (\n                        <Tag color=\"red\">{item.status}</Tag>\n                      ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User Name\",\n    dataIndex: \"username\",\n    key: \"username\",\n  },\n  {\n    title: \"Role\",\n    dataIndex: \"role\",\n    key: \"role\",\n    render: (_, record) => {\n      return record.role ? \"User\" : \"Admin\";\n    },\n  },\n  {\n    title: \"Birthday\",\n    dataIndex: \"dob\",\n    key: \"dob\",\n  },\n  {\n    title: \"Gender\",\n    dataIndex: \"gender\",\n    key: \"gender\",\n    render: (_, record) => {\n      return record.gender === 0\n        ? \"Male\"\n        : record.gender === 1\n        ? \"Female\"\n        : \"Other\";\n    },\n  },\n  {\n    title: \"Phone\",\n    dataIndex: \"phone\",\n    key: \"phone\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/users?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteUser = useCallback(async () => {\n    await post(\"/remove_users\", { selectedIds });\n    notification.success({\n      message: \"Delete user successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List user\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search user by name\"\n            newPath=\"/admin/users/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteUser}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteUser, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/users/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  Select,\n  DatePicker,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { post, loading } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = { ...data, dob: data.dob.format(\"DD/MM/YYYY\") };\n      const response = await post(\"/users\", formData);\n\n      if (response._id) {\n        notification.success({\n          message: \"Create user successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/users\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New user\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"username\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Password\"\n                    name=\"password\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      {\n                        required: true,\n                        message: \"This field is required\",\n                      },\n                    ]}\n                  >\n                    <Input.Password />\n                  </Form.Item>\n\n                  <Form.Item label=\"Role\" name=\"role\">\n                    <Select defaultValue={1}>\n                      <Option key=\"0\" value={0}>\n                        Admin\n                      </Option>\n                      <Option key=\"1\" value={1}>\n                        User\n                      </Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Gender\" name=\"gender\">\n                    <Select>\n                      <Option key=\"0\" value={0}>\n                        Male\n                      </Option>\n                      <Option key=\"1\" value={1}>\n                        Female\n                      </Option>\n                      <Option key=\"2\" value={2}>\n                        Other\n                      </Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Birthday\" name=\"dob\">\n                    <DatePicker\n                      placeholder=\"\"\n                      style={{ width: \"100%\" }}\n                      format=\"DD/MM/YYYY\"\n                    />\n                  </Form.Item>\n\n                  <Form.Item label=\"Phone\" name=\"phone\">\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Select,\n  DatePicker,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const history = useHistory();\n  const { userId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const formData = { ...data, dob: data.dob.format(\"DD/MM/YYYY\") };\n      const patchResponse = await patch(`/users/${userId}`, formData);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update user successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/users\");\n      }\n    },\n    [userId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getUserInfo = async () => {\n      if (userId) {\n        const getResponse = await get(`/users/${userId}`);\n        form.setFieldsValue({\n          username: getResponse.username,\n          role: getResponse.role,\n          password: getResponse.password,\n          phone: getResponse.phone || \"\",\n          dob: getResponse.dob ? moment(getResponse.dob, \"DD/MM/YYYY\") : \"\",\n          gender:\n            getResponse.gender !== \"null\" || getResponse.gender !== \"undefined\"\n              ? getResponse.gender\n              : \"\",\n        });\n      }\n    };\n\n    getUserInfo();\n  }, [userId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit user\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>User not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Name\"\n                        name=\"username\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item label=\"Password\" name=\"password\">\n                        <Input.Password />\n                      </Form.Item>\n\n                      <Form.Item label=\"Role\" name=\"role\">\n                        <Select defaultValue={1}>\n                          <Option key=\"0\" value={0}>\n                            Admin\n                          </Option>\n                          <Option key=\"1\" value={1}>\n                            User\n                          </Option>\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item label=\"Gender\" name=\"gender\">\n                        <Select>\n                          <Option key=\"0\" value={0}>\n                            Male\n                          </Option>\n                          <Option key=\"1\" value={1}>\n                            Female\n                          </Option>\n                          <Option key=\"2\" value={2}>\n                            Other\n                          </Option>\n                        </Select>\n                      </Form.Item>\n\n                      <Form.Item label=\"Birthday\" name=\"dob\">\n                        <DatePicker\n                          placeholder=\"\"\n                          style={{ width: \"100%\" }}\n                          format=\"DD/MM/YYYY\"\n                        />\n                      </Form.Item>\n\n                      <Form.Item label=\"Phone\" name=\"phone\">\n                        <Input />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/categories?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteCategory = useCallback(async () => {\n    await post(\"/remove_categories\", { selectedIds });\n    notification.success({\n      message: \"Delete category successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List category\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search category by name\"\n            newPath=\"/admin/categories/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteCategory}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteCategory, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/categories/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n  }\n`;\n","import { Form, Input, Button, Spin, Row, Col, notification } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    (data) => {\n      post(\"/categories\", data);\n    },\n    [post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (response._id) {\n      notification.success({\n        message: \"Create category successfully\",\n        placement: \"topRight\",\n      });\n      history.replace(\"/admin/categories\");\n    }\n  }, [history, response]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New category\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Category name\"\n                    name=\"name\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import { Form, Input, Button, Spin, Row, Col, notification } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst EditPage = () => {\n  const history = useHistory();\n  const { categoryId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/categories/${categoryId}`, data);\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update category successfully\",\n          placement: \"topRight\",\n        });\n        history.push(\"/admin/categories\");\n      }\n    },\n    [categoryId, history, patch]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const getCategoryInfo = async () => {\n      if (categoryId) {\n        const getResponse = await get(`/categories/${categoryId}`);\n        form.setFieldsValue({ name: getResponse.name });\n      }\n    };\n\n    getCategoryInfo();\n  }, [categoryId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeader title=\"Edit category\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Category not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Category name\"\n                        name=\"name\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response._id, response.code]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n  }\n`;\n","import { Table, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport HeaderArea from \"components/HeaderArea\";\nimport EditButton from \"components/EditButton\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"Title\",\n    dataIndex: \"title\",\n    key: \"title\",\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n  },\n];\n\nconst ListPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/questions?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteQuestion = useCallback(async () => {\n    await post(\"/remove_questions\", { selectedIds });\n    notification.success({\n      message: \"Delete question successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List question\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            searchPlaceHolder=\"Search question by title\"\n            newPath=\"/admin/questions/new\"\n            selectedIds={selectedIds}\n            onDelete={handleDeleteQuestion}\n            onSearch={(data) => setQuery(data)}\n          />\n        ),\n        [handleDeleteQuestion, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                    action: (\n                      <EditButton\n                        onClick={() =>\n                          history.push(`/admin/questions/${item._id}/edit`)\n                        }\n                      />\n                    ),\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          history,\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  form {\n    padding: 24px;\n\n    .ant-space {\n      display: flex;\n    }\n\n    .ant-space-align-baseline {\n      align-items: center;\n    }\n  }\n`;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Space,\n  Radio,\n} from \"antd\";\nimport {\n  InfoCircleOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst NewPage = () => {\n  const history = useHistory();\n  const { get, post, loading, response = {} } = useRequest({});\n\n  const onFinish = useCallback(\n    async (data) => {\n      const postResponse = await post(\"/questions\", data);\n\n      if (postResponse._id) {\n        notification.success({\n          message: \"Create question successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/questions\");\n      }\n    },\n    [history, post]\n  );\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    get(\"/courses\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"New question\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  <Form.Item\n                    label=\"Title\"\n                    name=\"title\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Input autoFocus />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"course\"\n                    label=\"Course\"\n                    tooltip={{\n                      title: \"This is a required field\",\n                      icon: <InfoCircleOutlined />,\n                    }}\n                    rules={[\n                      { required: true, message: \"This field is required\" },\n                    ]}\n                  >\n                    <Select placeholder=\"Select a course\" allowClear>\n                      {response.data &&\n                        response.data.map((course) => (\n                          <Option key={course._id} value={course._id}>\n                            {course.name}\n                          </Option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.List name=\"answers\">\n                    {(fields, { add, remove }) => (\n                      <>\n                        {fields.map((field) => (\n                          <Space key={field.key} align=\"baseline\">\n                            <Form.Item\n                              noStyle\n                              shouldUpdate={(prevValues, curValues) =>\n                                prevValues.area !== curValues.area ||\n                                prevValues.answers !== curValues.answers\n                              }\n                            >\n                              {() => (\n                                <Form.Item\n                                  {...field}\n                                  label=\"Content\"\n                                  name={[field.name, \"content\"]}\n                                  fieldKey={[field.fieldKey, \"content\"]}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Missing content\",\n                                    },\n                                  ]}\n                                >\n                                  <Input placeholder=\"For Ex: A. or 1.\" />\n                                </Form.Item>\n                              )}\n                            </Form.Item>\n\n                            <Form.Item\n                              {...field}\n                              label=\"Value\"\n                              name={[field.name, \"value\"]}\n                              fieldKey={[field.fieldKey, \"value\"]}\n                              rules={[\n                                { required: true, message: \"Missing value\" },\n                              ]}\n                            >\n                              <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                              {...field}\n                              label=\"Is True\"\n                              name={[field.name, \"isTrue\"]}\n                              fieldKey={[field.fieldKey, \"isTrue\"]}\n                            >\n                              <Radio.Group>\n                                <Radio value={true}>Yes</Radio>\n                              </Radio.Group>\n                            </Form.Item>\n\n                            <MinusCircleOutlined\n                              onClick={() => remove(field.name)}\n                            />\n                          </Space>\n                        ))}\n\n                        <Form.Item>\n                          <Button\n                            type=\"dashed\"\n                            onClick={() => add()}\n                            block\n                            icon={<PlusOutlined />}\n                          >\n                            Add answers\n                          </Button>\n                        </Form.Item>\n                      </>\n                    )}\n                  </Form.List>\n\n                  <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Create\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [form, onFinish, response.data]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default NewPage;\n","import {\n  Form,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  notification,\n  Select,\n  Radio,\n  Space,\n} from \"antd\";\nimport {\n  InfoCircleOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport PageHeaderComponent from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./NewPage.styles\";\n\nconst { Option } = Select;\n\nconst EditPage = () => {\n  const { questionId } = useParams();\n  const { get, patch, loading, response = {} } = useRequest({});\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const [courses, setCourses] = useState([]);\n\n  const onFinish = useCallback(\n    async (data) => {\n      const patchResponse = await patch(`/questions/${questionId}`, data);\n\n      if (patchResponse._id) {\n        notification.success({\n          message: \"Update question successfully\",\n          placement: \"topRight\",\n        });\n        history.replace(\"/admin/questions\");\n      }\n    },\n    [history, questionId, patch]\n  );\n\n  const handleSetAnswer = useCallback(\n    (field) => {\n      const oldAnswerList = form.getFieldValue(\"answers\");\n      const newAnswerList = oldAnswerList.map((answer, index) => {\n        if (index === field.key) {\n          return answer;\n        }\n\n        return { ...answer, isTrue: false };\n      });\n\n      form.setFieldsValue({ answers: newAnswerList });\n    },\n    [form]\n  );\n\n  useEffect(() => {\n    const getCourseInfo = async () => {\n      const coursesResponse = await get(\"/courses\");\n      setCourses(coursesResponse.data);\n\n      if (questionId) {\n        const getResponse = await get(`/questions/${questionId}`);\n        form.setFieldsValue({\n          title: getResponse.title,\n          course: getResponse.course,\n          answers: getResponse.answers,\n        });\n      }\n    };\n\n    getCourseInfo();\n  }, [questionId, form, get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        {useMemo(\n          () => (\n            <PageHeaderComponent title=\"Edit question\" />\n          ),\n          []\n        )}\n\n        {useMemo(\n          () => (\n            <Row>\n              <Col span={10} offset={7}>\n                <Form layout=\"vertical\" form={form} onFinish={onFinish}>\n                  {response.code && <p>Question not found</p>}\n\n                  {response._id && (\n                    <>\n                      <Form.Item\n                        label=\"Title\"\n                        name=\"title\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Input autoFocus />\n                      </Form.Item>\n\n                      <Form.Item\n                        name=\"course\"\n                        label=\"Course\"\n                        tooltip={{\n                          title: \"This is a required field\",\n                          icon: <InfoCircleOutlined />,\n                        }}\n                        rules={[\n                          { required: true, message: \"This field is required\" },\n                        ]}\n                      >\n                        <Select placeholder=\"Select a course\" allowClear>\n                          {courses.map((course) => (\n                            <Option key={course._id} value={course._id}>\n                              {course.name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n                      <Form.List name=\"answers\">\n                        {(fields, { add, remove }) => (\n                          <>\n                            {fields.map((field) => (\n                              <Space key={field.key} align=\"baseline\">\n                                <Form.Item\n                                  noStyle\n                                  shouldUpdate={(prevValues, curValues) =>\n                                    prevValues.answers !== curValues.answers\n                                  }\n                                >\n                                  {() => (\n                                    <Form.Item\n                                      {...field}\n                                      label=\"Content\"\n                                      name={[field.name, \"content\"]}\n                                      fieldKey={[field.fieldKey, \"content\"]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Missing content\",\n                                        },\n                                      ]}\n                                    >\n                                      <Input placeholder=\"For Ex: A. or 1.\" />\n                                    </Form.Item>\n                                  )}\n                                </Form.Item>\n\n                                <Form.Item\n                                  {...field}\n                                  label=\"Value\"\n                                  name={[field.name, \"value\"]}\n                                  fieldKey={[field.fieldKey, \"value\"]}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Missing value\",\n                                    },\n                                  ]}\n                                >\n                                  <Input />\n                                </Form.Item>\n\n                                <Form.Item\n                                  {...field}\n                                  label=\"Is True\"\n                                  name={[field.name, \"isTrue\"]}\n                                  fieldKey={[field.fieldKey, \"isTrue\"]}\n                                >\n                                  <Radio.Group\n                                    onChange={() => handleSetAnswer(field)}\n                                  >\n                                    <Radio value={true}>Yes</Radio>\n                                  </Radio.Group>\n                                </Form.Item>\n\n                                <MinusCircleOutlined\n                                  onClick={() => remove(field.name)}\n                                />\n                              </Space>\n                            ))}\n\n                            <Form.Item>\n                              <Button\n                                type=\"dashed\"\n                                onClick={() => add()}\n                                block\n                                icon={<PlusOutlined />}\n                              >\n                                Add answers\n                              </Button>\n                            </Form.Item>\n                          </>\n                        )}\n                      </Form.List>\n\n                      <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                          Update\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form>\n              </Col>\n            </Row>\n          ),\n          [\n            courses,\n            form,\n            handleSetAnswer,\n            onFinish,\n            response._id,\n            response.code,\n          ]\n        )}\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default EditPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  table {\n    th,\n    td {\n      text-align: center;\n    }\n\n    .content-column {\n      max-width: 460px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      margin-bottom: 0;\n    }\n  }\n`;\n","import { Table, Rate, notification } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport DeleteButton from \"components/DeleteButton\";\nimport HeaderArea from \"components/HeaderArea\";\nimport PageHeader from \"components/PageHeader\";\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./ListPage.styles\";\n\nconst columns = [\n  {\n    title: \"User\",\n    dataIndex: \"user\",\n    key: \"user\",\n    render: (_, record) => {\n      return record.user.username;\n    },\n  },\n  {\n    title: \"Course\",\n    dataIndex: \"course\",\n    key: \"course\",\n    render: (_, record) => {\n      return record.course.name;\n    },\n  },\n  {\n    title: \"Rate\",\n    dataIndex: \"rate\",\n    key: \"rate\",\n    render: (_, record) => {\n      return <Rate disabled allowHalf value={record.rate} />;\n    },\n  },\n  {\n    title: \"Content\",\n    dataIndex: \"content\",\n    key: \"content\",\n    width: \"50%\",\n    render: (_, record) => {\n      return <p className=\"content-column\">{record.content}</p>;\n    },\n  },\n];\n\nconst ListPage = () => {\n  const { get, post, loading, response = { data: [], total: 0 } } = useRequest(\n    {}\n  );\n\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    const pageQuery = `limit=${10 * page}&skip=${10 * page - 10}`;\n    const searchQuery = query ? `&search=${query}` : \"\";\n    get(`/reviews?${pageQuery}${searchQuery}`);\n  }, [get, page, query]);\n\n  const handleDeleteReview = useCallback(async () => {\n    await post(\"/remove_reviews\", { selectedIds });\n    notification.success({\n      message: \"Delete review successfully\",\n      placement: \"topRight\",\n    });\n    setSelectedIds([]);\n    setPage(1);\n  }, [post, selectedIds]);\n\n  return (\n    <Wrapper>\n      {useMemo(\n        () => (\n          <PageHeader title=\"List review\" onBack={null} />\n        ),\n        []\n      )}\n\n      {useMemo(\n        () => (\n          <HeaderArea\n            selectedIds={selectedIds}\n            onDelete={null}\n            searchPlaceHolder=\"Search review by content\"\n            onSearch={(data) => setQuery(data)}\n            customButtonArea={\n              <div className=\"button-area\">\n                <DeleteButton\n                  disabled={!selectedIds.length}\n                  onClick={handleDeleteReview}\n                />\n              </div>\n            }\n          />\n        ),\n        [handleDeleteReview, selectedIds]\n      )}\n\n      {useMemo(\n        () => (\n          <Table\n            rowSelection={{\n              type: \"checkbox\",\n              onChange: (data) => setSelectedIds(data),\n              selectedRowKeys: selectedIds,\n            }}\n            columns={columns}\n            dataSource={\n              response.code\n                ? []\n                : response.data.map((item) => ({\n                    ...item,\n                    key: item._id,\n                  }))\n            }\n            pagination={{\n              onChange: (page) => setPage(page),\n              pageSize: 10,\n              total: response.total,\n              current: page,\n            }}\n            loading={loading}\n          />\n        ),\n        [\n          loading,\n          page,\n          response.code,\n          response.data,\n          response.total,\n          selectedIds,\n        ]\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ListPage;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  .ant-row {\n    margin-bottom: 16px;\n  }\n`;\n","import { Statistic, Card, Row, Col, Spin } from \"antd\";\nimport { useEffect } from \"react\";\n\nimport useRequest from \"hooks/useRequest\";\nimport Wrapper from \"./HomePage.styles\";\n\nconst HomePage = () => {\n  const { get, loading, response = {} } = useRequest({});\n\n  useEffect(() => {\n    get(\"/admin-homes\");\n  }, [get]);\n\n  return (\n    <Spin spinning={loading}>\n      <Wrapper>\n        <Row gutter={16}>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Total request\"\n                value={response.totalRequest}\n                valueStyle={{ color: \"#3f8600\" }}\n              />\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Total course\"\n                value={response.totalCourse}\n                valueStyle={{ color: \"#3f8600\" }}\n              />\n            </Card>\n          </Col>\n        </Row>\n\n        <Row gutter={16}>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Total user\"\n                value={response.totalUser}\n                valueStyle={{ color: \"#3f8600\" }}\n              />\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Total category\"\n                value={response.totalCategory}\n                valueStyle={{ color: \"#3f8600\" }}\n              />\n            </Card>\n          </Col>\n        </Row>\n\n        <Row gutter={16}>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Total review\"\n                value={response.totalReview}\n                valueStyle={{ color: \"#3f8600\" }}\n              />\n            </Card>\n          </Col>\n        </Row>\n      </Wrapper>\n    </Spin>\n  );\n};\n\nexport default HomePage;\n","import { Menu } from \"antd\";\nimport {\n  UserOutlined,\n  VideoCameraOutlined,\n  AlertOutlined,\n  BookOutlined,\n  FileOutlined,\n  QuestionCircleOutlined,\n  BarsOutlined,\n  FormOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\n\nconst MenuItem = () => {\n  return (\n    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[]}>\n      <Menu.Item key=\"category\" icon={<BarsOutlined />}>\n        <Link to=\"/admin/categories\">Categories</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"request\" icon={<AlertOutlined />}>\n        <Link to=\"/admin/requests\">Requests</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"course\" icon={<BookOutlined />}>\n        <Link to=\"/admin/courses\">Courses</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"user\" icon={<UserOutlined />}>\n        <Link to=\"/admin/users\">Users</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"lesson\" icon={<VideoCameraOutlined />}>\n        <Link to=\"/admin/lessons\">Lessons</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"exam\" icon={<FileOutlined />}>\n        <Link to=\"/admin/exams\">Exams</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"question\" icon={<QuestionCircleOutlined />}>\n        <Link to=\"/admin/questions\">Questions</Link>\n      </Menu.Item>\n\n      <Menu.Item key=\"reviews\" icon={<FormOutlined />}>\n        <Link to=\"/admin/reviews\">Reviews</Link>\n      </Menu.Item>\n    </Menu>\n  );\n};\n\nexport default MenuItem;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  min-height: 100vh;\n\n  .ant-layout {\n    min-height: 100vh;\n  }\n\n  .ant-layout-sider-collapsed {\n    .logo {\n      font-size: 12px !important;\n    }\n  }\n\n  .ant-layout-header {\n    height: 60px;\n  }\n\n  .logo {\n    min-height: 32px;\n    margin: 16px;\n    color: #fff;\n    font-size: 23px;\n    text-align: center;\n  }\n\n  .site-layout .site-layout-background {\n    background: #fff;\n  }\n\n  header.site-layout-background {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: 0 24px 0 0;\n  }\n\n  main.site-layout-background {\n    margin: 16px 16px;\n    /* padding: 24px; */\n  }\n`;\n","import { Layout, Menu, Avatar, Dropdown } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useState, useContext } from \"react\";\nimport {\n  UserOutlined,\n  SelectOutlined,\n  LogoutOutlined,\n} from \"@ant-design/icons\";\n\nimport AuthContext from \"contexts/auth\";\nimport MenuItem from \"./MenuItem\";\nimport Wrapper from \"./AdminLayout.styles\";\n\nconst { Header, Content, Sider } = Layout;\n\nconst AdminLayout = ({ children }) => {\n  const { dispatch } = useContext(AuthContext);\n  const [collapsed, setCollapsed] = useState(false);\n\n  const toggle = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <Wrapper>\n      <Layout>\n        <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\n          <div className=\"logo\">\n            <Link to=\"/admin\">NKH</Link>\n          </div>\n\n          <MenuItem />\n        </Sider>\n\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\">\n            <div className=\"user-info\">\n              <Dropdown\n                overlay={\n                  <Menu>\n                    <Menu.Item key=\"user-profile\" icon={<SelectOutlined />}>\n                      User profile\n                    </Menu.Item>\n                    <Menu.Item\n                      key=\"logout\"\n                      icon={<LogoutOutlined />}\n                      onClick={() => dispatch({ type: \"logout\" })}\n                    >\n                      Logout\n                    </Menu.Item>\n                  </Menu>\n                }\n              >\n                <Avatar size=\"large\" icon={<UserOutlined />} />\n              </Dropdown>\n            </div>\n          </Header>\n\n          {/* <Breadcrumb data={breadcrumb} /> */}\n\n          <Content className=\"site-layout-background\">{children}</Content>\n        </Layout>\n      </Layout>\n    </Wrapper>\n  );\n};\n\nexport default AdminLayout;\n","import { Switch } from \"react-router-dom\";\n\nimport AuthenticatedRoute from \"routes/AuthenticatedRoute\";\n\nimport { ListCourse, NewCourse, EditCourse } from \"domain/admin/Courses\";\nimport { ListExam, NewExam, EditExam } from \"domain/admin/Exams\";\nimport { ListLesson, NewLesson, EditLesson } from \"domain/admin/Lessons\";\nimport { ListRequest } from \"domain/admin/Requests\";\nimport { ListUser, NewUser, EditUser } from \"domain/admin/Users\";\nimport {\n  ListCategory,\n  NewCategory,\n  EditCategory,\n} from \"domain/admin/Categories\";\nimport {\n  ListQuestion,\n  NewQuestion,\n  EditQuestion,\n} from \"domain/admin/Questions\";\nimport { ListReview } from \"domain/admin/Reviews\";\nimport AdminHomePage from \"domain/admin/HomePage\";\nimport AdminLayout from \"layouts/AdminLayout\";\n\nfunction App() {\n  return (\n    <Switch>\n      <AdminLayout>\n        <AuthenticatedRoute exact path=\"/admin\" component={AdminHomePage} />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/requests\"\n          component={ListRequest}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories\"\n          component={ListCategory}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories/new\"\n          component={NewCategory}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/categories/:categoryId/edit\"\n          component={EditCategory}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/lessons\"\n          component={ListLesson}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/lessons/new\"\n          component={NewLesson}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/lessons/:lessonId/edit\"\n          component={EditLesson}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses\"\n          component={ListCourse}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses/new\"\n          component={NewCourse}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/courses/:categoryId/edit\"\n          component={EditCourse}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/questions\"\n          component={ListQuestion}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/questions/new\"\n          component={NewQuestion}\n        />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/questions/:questionId/edit\"\n          component={EditQuestion}\n        />\n\n        <AuthenticatedRoute exact path=\"/admin/exams\" component={ListExam} />\n        <AuthenticatedRoute exact path=\"/admin/exams/new\" component={NewExam} />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/exams/:examId/edit\"\n          component={EditExam}\n        />\n\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/reviews\"\n          component={ListReview}\n        />\n\n        <AuthenticatedRoute exact path=\"/admin/users\" component={ListUser} />\n        <AuthenticatedRoute exact path=\"/admin/users/new\" component={NewUser} />\n        <AuthenticatedRoute\n          exact\n          path=\"/admin/users/:userId/edit\"\n          component={EditUser}\n        />\n      </AdminLayout>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport AuthContext from \"contexts/auth\";\n\nconst PublicRoute = ({ component: Component, ...restProps }) => {\n  const { isAuth, user } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) =>\n        !isAuth ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: user.role === 0 ? \"/admin\" : \"/\" }} />\n        )\n      }\n    />\n  );\n};\n\nexport default PublicRoute;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  .site-layout-background {\n    background-color: #fff;\n  }\n\n  header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .logo {\n      font-size: 30px;\n      color: #fff;\n      margin-right: 32px;\n    }\n\n    .ant-input-search {\n      margin-right: 32px;\n      height: 35px;\n\n      .ant-input-affix-wrapper,\n      .ant-input-group-addon {\n        padding: 0;\n      }\n\n      input {\n        height: 35px;\n        padding-left: 11px;\n      }\n\n      .ant-btn {\n        height: 37px;\n      }\n    }\n\n    .signin-button {\n      margin-right: 16px;\n    }\n  }\n`;\n","import { Layout, Menu, Avatar, Dropdown, Input, Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useContext, useMemo } from \"react\";\nimport {\n  SelectOutlined,\n  LogoutOutlined,\n  UserOutlined,\n  LoginOutlined,\n  UserAddOutlined,\n} from \"@ant-design/icons\";\n\nimport AuthContext from \"contexts/auth\";\nimport Wrapper from \"./UserLayout.styles\";\n\nconst { Header, Content, Footer } = Layout;\nconst { Search } = Input;\n\nconst UserLayout = ({ children }) => {\n  const { dispatch, isAuth } = useContext(AuthContext);\n\n  const userAuthArea = useMemo(\n    () => (\n      <>\n        {isAuth ? (\n          <div className=\"user-info\">\n            <Dropdown\n              overlay={\n                <Menu>\n                  <Menu.Item key=\"user-profile\" icon={<SelectOutlined />}>\n                    User profile\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"logout\"\n                    icon={<LogoutOutlined />}\n                    onClick={() => dispatch({ type: \"logout\" })}\n                  >\n                    Logout\n                  </Menu.Item>\n                </Menu>\n              }\n            >\n              <Avatar size=\"large\" icon={<UserOutlined />} />\n            </Dropdown>\n          </div>\n        ) : (\n          <>\n            <Link to=\"/sign_in\">\n              <Button\n                icon={<LoginOutlined />}\n                type=\"primary\"\n                className=\"signin-button\"\n              >\n                Sign In\n              </Button>\n            </Link>\n\n            <Link to=\"/sign_up\">\n              <Button\n                type=\"primary\"\n                icon={<UserAddOutlined />}\n                className=\"signup-button\"\n              >\n                Sign Up\n              </Button>\n            </Link>\n          </>\n        )}\n      </>\n    ),\n    [dispatch, isAuth]\n  );\n\n  return (\n    <Wrapper>\n      <Layout>\n        <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\n          <div className=\"logo\">NKH</div>\n\n          <Search\n            placeholder=\"Search course here...\"\n            onSearch={(value) => console.log(value)}\n            enterButton\n            allowClear\n          />\n\n          {userAuthArea}\n        </Header>\n        <Content\n          className=\"site-layout\"\n          style={{ padding: \"0 50px\", marginTop: 64 }}\n        >\n          <div\n            className=\"site-layout-background\"\n            style={{ minHeight: \"calc(100vh - 134px)\" }}\n          >\n            {children}\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Course Sale Online @2020 Created by NKH\n        </Footer>\n      </Layout>\n    </Wrapper>\n  );\n};\n\nexport default UserLayout;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  .ant-row {\n    margin-bottom: 16px;\n  }\n`;\n","import { Card, Col, Row } from \"antd\";\n\nimport UserLayout from \"layouts/UserLayout\";\nimport Wrapper from \"./HomePage.styles\";\n\nconst HomePage = () => {\n  return (\n    <UserLayout>\n      <Wrapper>\n        <Row gutter={16}>\n          <Col span={8}>\n            <Card hoverable title=\"Card title\" bordered={false}>\n              Card content\n            </Card>\n          </Col>\n          <Col span={8}>\n            <Card hoverable title=\"Card title\" bordered={false}>\n              Card content\n            </Card>\n          </Col>\n          <Col span={8}>\n            <Card hoverable title=\"Card title\" bordered={false}>\n              Card content\n            </Card>\n          </Col>\n        </Row>\n      </Wrapper>\n    </UserLayout>\n  );\n};\n\nexport default HomePage;\n","import { Switch, Route } from \"react-router-dom\";\n\nimport AuthenticatedRoute from \"routes/AuthenticatedRoute\";\n\nimport UserHomePage from \"domain/user/HomePage\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={UserHomePage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { AuthProvider } from \"contexts/auth\";\n\nimport SignInPage from \"containers/SignIn\";\nimport SignUpPage from \"containers/SignUp\";\n\nimport AdminRoutes from \"routes/AdminRoutes\";\nimport PublicRoute from \"routes/PublicRoute\";\nimport UserRoutes from \"routes/UserRoutes\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Switch>\n          <PublicRoute exact path=\"/sign_in\" component={SignInPage} />\n\n          <PublicRoute exact path=\"/sign_up\" component={SignUpPage} />\n\n          <Route exact path=\"/\">\n            <UserRoutes />\n          </Route>\n\n          <Route path=\"/admin\">\n            <AdminRoutes />\n          </Route>\n        </Switch>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}